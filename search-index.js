var searchIndex = JSON.parse('{\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIILLFFFFFFFALLLLLFFLLLLLLOOLLLLLLLLLLFFFFFFFFLFFLFLLLLLLLLLLLLLQIENNLLFFFFFLLLLLLFFLLKFFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":[[0,"bytemuck"],[78,"bytemuck::checked"]],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-<code>Pod</code> cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[5,0,0,0,16,16,16,0,5,0,0,0,5,5,0,0,0,5,5,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,16,16,5,5,16,16,0,0,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,5,0,0,5,0,5,17,17,17,17,17,17,17,17,17,17,18,18,14,0,0,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,0,0,15,15,14,0,0,0,0,0,0,15,0,0,15,0,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[[[0,[1,4]]],[[3,[2]]]],[1,4],[[[0,[1,4]]],[[0,[1,4]]]],[1,4],[[[3,[1]]],[[3,[4]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,4]]]]]],0,[5,5],[[5,5],6],[[5,7],8],[[5,7],8],[[]],[[[3,[2]]],4],[[[3,[2]]],[[0,[1,4]]]],[[],9],[[],9],[[5,10]],[[]],[[]],[[]],0,0,[11,11],[11,11],[[]],[[]],[[]],[[]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[1]]]],[[[3,[[0,[1,4]]]]]],[[[3,[2]]],4],[1,[[12,[4,5]]]],[[[0,[1,4]]],[[12,[[0,[1,4]],5]]]],[1,[[12,[4,5]]]],[[[3,[1]]],[[12,[[3,[4]],5]]]],[[[3,[[0,[1,4]]]]],[[12,[[3,[[0,[1,4]]]],5]]]],[[],12],[[[3,[2]]],[[12,[4,5]]]],[[[3,[2]]],[[12,[[0,[1,4]],5]]]],[[],12],[[[3,[2]]],[[12,[4,5]]]],[[],13],[11,11],[11,11],[[]],[[]],[[]],[[]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[]],[[]],0,0,0,0,0,[[]],[[]],[1,14],[[[0,[1,4]]],[[0,[1,14]]]],[1,14],[[[3,[1]]],[[3,[14]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,14]]]]]],[15,15],[[15,15],6],[[15,7],8],[[15,7],8],[5,15],[[]],[[[3,[2]]],14],[[[3,[2]]],[[0,[1,14]]]],[[15,10]],[[]],[[],6],[[[3,[2]]],14],[1,[[12,[14,15]]]],[[[0,[1,4]]],[[12,[[0,[14,1]],15]]]],[1,[[12,[14,15]]]],[[[3,[1]]],[[12,[[3,[14]],15]]]],[[[3,[[0,[1,4]]]]],[[12,[[3,[[0,[14,1]]]],15]]]],[[],12],[[[3,[2]]],[[12,[14,15]]]],[[[3,[2]]],[[12,[[0,[14,1]],15]]]],[[],12],[[[3,[2]]],[[12,[14,15]]]],[[],13]],"c":[],"p":[[8,"NoUninit"],[15,"u8"],[15,"slice"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hasher"],[8,"Sized"],[4,"Result"],[3,"TypeId"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"Zeroable"]]},\
"cint":{"doc":"<code>cint</code> - <code>c</code>olor <code>int</code>erop","t":"DNDNDNDNDDNDNDNDNDNQIIQDNDNDNDNDNDNDNDNDNDNDNDNDNDNDNDNDNDNSDNDNDDNSEDNDNDNDNDNDNMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMM","n":["Aces2065","Aces2065","AcesCc","AcesCc","AcesCct","AcesCct","AcesCg","AcesCg","Alpha","Bt2020","Bt2020","Bt2100","Bt2100","CieLCh","CieLCh","CieLab","CieLab","CieXYZ","CieXYZ","CintTy","ColorInterop","ColorType","ComponentTy","DciP3","DciP3","DciXYZPrime","DciXYZPrime","DisplayP3","DisplayP3","EncodedBt2020","EncodedBt2020","EncodedBt2100HLG","EncodedBt2100HLG","EncodedBt2100PQ","EncodedBt2100PQ","EncodedDisplayP3","EncodedDisplayP3","EncodedRec709","EncodedRec709","EncodedSrgb","EncodedSrgb","GenericColor1","GenericColor1","GenericColor3","GenericColor3","Hsl","Hsl","Hsv","Hsv","ICtCpHLG","ICtCpHLG","ICtCpPQ","ICtCpPQ","LinearSrgb","LinearSrgb","Luma","Luma","Luminance","Luminance","NUM_COMPONENTS","Oklab","Oklab","Oklch","Oklch","PremultipliedAlpha","Rec709","Rec709","SPACE","Spaces","YCbCr","YCbCr","YCxCz","YCxCz","YPbPr","YPbPr","YPrimeCbCr","YPrimeCbCr","YPrimePbPr","YPrimePbPr","Yuv","Yuv","a","a","alpha","alpha","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","c","cb","cb","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color","color","cp","cp","cr","cr","ct","ct","cx","cz","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cint","g","g","g","g","g","g","g","g","g","g","g","g","g","g","g","g","h","h","h","h","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i","i","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_cint","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","l","l","l","l","l","l","l","num_components","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pb","pb","pr","pr","r","r","r","r","r","r","r","r","r","r","r","r","r","r","r","r","s","s","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","v","v","x","x","x","x","y","y","y","y","y","y","y","y","y","z","z","z"],"q":[[0,"cint"]],"d":["A color in the ACES 2065-1 color space.","A color in the ACES 2065-1 color space.","A color in the ACEScc color space.","A color in the ACEScc color space.","A color in the ACEScct color space.","A color in the ACEScct color space.","A color in the ACEScg color space.","A color in the ACEScg color space.","A color with an alpha component.","A color in the BT.2020 color space.","A color in the BT.2020 color space.","A color in the BT.2100 color space.","A color in the BT.2100 color space.","A color in the CIE L*C*h° color space.","A color in the CIE L*C*h° color space.","A color in the CIE L*a*b* color space.","A color in the CIE L*a*b* color space.","A color in the CIE XYZ color space.","A color in the CIE XYZ color space.","","A trait that should be implemented by provider crates on …","A trait used to simpify the interface of the <code>Alpha</code> and …","","A color in the DCI-P3 (aka P3 DCI and P3 D60) color space.","A color in the DCI-P3 (aka P3 DCI and P3 D60) color space.","A color in the X’Y’Z’ color space, a DCI …","A color in the X’Y’Z’ color space, a DCI …","A color in the Display P3 (aka P3 D65) color space.","A color in the Display P3 (aka P3 D65) color space.","A color in the encoded BT.2020 color space.","A color in the encoded BT.2020 color space.","A color in the encoded BT.2100 color space with HLG …","A color in the encoded BT.2100 color space with HLG …","A color in the encoded BT.2100 color space with PQ …","A color in the encoded BT.2100 color space with PQ …","A color in the Display P3 (aka P3 D65) color space.","A color in the Display P3 (aka P3 D65) color space.","A color in the encoded Rec.709/BT.709 color space.","A color in the encoded Rec.709/BT.709 color space.","A color in the encoded sRGB color space.","A color in the encoded sRGB color space.","A color in a generic color space that can be represented …","A color in a generic color space that can be represented …","A color in a generic color space that can be represented …","A color in a generic color space that can be represented …","A color in the HSL color space.","A color in the HSL color space.","A color in the HSV color space.","A color in the HSV color space.","A color in the ICtCp color space with HLG (Hybrid …","A color in the ICtCp color space with HLG (Hybrid …","A color in the ICtCp color space with PQ (Perceptual …","A color in the ICtCp color space with PQ (Perceptual …","A color in the linear (decoded) sRGB color space.","A color in the linear (decoded) sRGB color space.","A single-channel CIE luma (non-linear transform from …","A single-channel CIE luma (non-linear transform from …","A single-channel CIE luminance.","A single-channel CIE luminance.","","A color in the Oklab color space.","A color in the Oklab color space.","A color in the Oklch color space (a transformation from …","A color in the Oklch color space (a transformation from …","A premultiplied color with an alpha component.","A color in the Rec.709/BT.709 color space.","A color in the Rec.709/BT.709 color space.","","An enum with a variant for each of the color spaces …","A color in the YCbCr color space. See discussion of the …","A color in the YCbCr color space. See discussion of the …","A color in the YCxCz (also called YyCxCz) color space, …","A color in the YCxCz (also called YyCxCz) color space, …","A color in the YPbPr color space. See discussion of the …","A color in the YPbPr color space. See discussion of the …","A color in the Y’CbCr color space. See discussion of the …","A color in the Y’CbCr color space. See discussion of the …","A color in the Y’PbPr color space. See discussion of the …","A color in the Y’PbPr color space. See discussion of the …","A color in the YUV color space. See discussion of the …","A color in the YUV color space. See discussion of the …","The a component, representing green-red chroma difference.","The a component, representing green-red chroma difference.","The alpha component.","The alpha componenthe blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The blue component.","The b component, representing blue-yellow chroma …","The b component, representing blue-yellow chroma …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The C (chroma) component. Varies from 0 to a hue dependent …","The C (chroma) component. Varies from 0 to a hue dependent …","The Cb (chroma-blue/yellow) component.","The Cb (chroma-blue/yellow) component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The contained color, which is completely separate from the …","The contained color, which has been premultiplied with …","The Cp (chroma-protan) component.","The Cp (chroma-protan) component.","The Cr (chroma-red/green) component.","The Cr (chroma-red/green) component.","The Ct (chroma-tritan) component.","The Ct (chroma-tritan) component.","The Cx (chroma difference blue/yellow) component","The Cz (chroma difference red/green) component","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Convert <code>self</code> into its canonical <code>cint</code> type.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The green component.","The h (hue) component. Varies from -PI to PI.","The h (hue) component. Varies from -PI to PI.","The H (hue) component. Varies from 0 to 1.","The H (hue) component. Varies from 0 to 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The I (intensity) component.","The I (intensity) component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a <code>Self</code> from its canonical <code>cint</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CIE luminance.","CIE luminance.","The L (lightness) component. Varies from 0 to 100.","The L (lightness) component. Varies from 0 to 100.","The L (lightness) component. Varies from 0 to 1","The L (lightness) component. Varies from 0 to 1.","The L (lightness) component. Varies from 0 to 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Pb (chroma-blue/yellow) component.","The Pb (chroma-blue/yellow) component.","The Pr (chroma-red/green) component.","The Pr (chroma-red/green) component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The red component.","The S (saturation) component. Varies from 0 to 1.","The S (saturation) component. Varies from 0 to 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The U (chroma-blue/yellow) component.","The V (value) component. Varies from 0 to 1.","The V (chroma-red/green) component.","The first component.","The first component.","The X’ component.","The X component.","The second component.","The Y’ component.","The Y component.","The Y (luminance) component.","The Y’ (luma) component.","The Y (luminance) component.","The Y’ (luma) component.","The Y (luminance) component.","The Yy (luminance) component.","The third component.","The Z’ component.","The Z component."],"i":[0,43,0,43,0,43,0,43,0,0,43,0,43,0,43,0,43,0,43,58,0,0,42,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,0,43,42,0,43,0,43,0,0,43,42,0,0,43,0,43,0,43,0,43,0,43,0,43,39,28,3,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,10,38,32,30,15,34,22,27,35,29,13,33,6,23,19,31,39,28,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,20,26,16,37,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,40,24,11,16,37,24,11,12,12,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,43,10,10,10,10,38,38,38,38,32,32,32,32,30,30,30,30,5,5,5,5,25,25,25,25,14,14,14,14,21,21,21,21,15,15,15,15,34,34,34,34,22,22,22,22,27,27,27,27,35,35,35,35,29,29,29,29,13,13,13,13,9,9,9,9,33,33,33,33,6,6,6,6,23,23,23,23,19,19,19,19,31,31,31,31,24,24,24,24,11,11,11,11,36,36,36,36,39,39,39,39,20,20,20,20,28,28,28,28,26,26,26,26,18,18,18,18,2,2,2,2,16,16,16,16,37,37,37,37,17,17,17,17,7,7,7,7,8,8,8,8,12,12,12,12,58,10,38,32,30,15,34,22,27,35,29,13,33,6,23,19,31,20,26,18,2,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,24,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,43,10,10,38,38,32,32,30,30,5,5,25,25,14,14,21,21,15,15,34,34,22,22,27,27,35,35,29,29,13,13,9,9,33,33,6,6,23,23,19,19,31,31,24,24,11,11,36,36,39,39,20,20,28,28,26,26,18,18,2,2,16,16,37,37,17,17,7,7,8,8,12,12,58,3,40,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,14,21,39,20,28,26,18,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,17,7,17,7,10,38,32,30,15,34,22,27,35,29,13,33,6,23,19,31,18,2,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,3,40,43,10,38,32,30,5,25,14,21,15,34,22,27,35,29,13,9,33,6,23,19,31,24,11,36,39,20,28,26,18,2,16,37,17,7,8,12,8,2,8,5,25,9,36,5,9,36,16,37,17,7,8,12,5,9,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[2,[1]]]]],[[4,[1]]]],[[[3,[[5,[1]]]]],[[4,[1]]]],[[[3,[[6,[1]]]]],[[4,[1]]]],[[[3,[[7,[1]]]]],[[4,[1]]]],[[[3,[[8,[1]]]]],[[4,[1]]]],[[[3,[[9,[1]]]]],[[4,[1]]]],[[[3,[[10,[1]]]]],[[4,[1]]]],[[[3,[[11,[1]]]]],[[4,[1]]]],[[[3,[[12,[1]]]]],[[4,[1]]]],[[[3,[[13,[1]]]]],[[4,[1]]]],[[[3,[[14,[1]]]]],[[4,[1]]]],[[[3,[[15,[1]]]]],[[4,[1]]]],[[[3,[[16,[1]]]]],[[4,[1]]]],[[[3,[[17,[1]]]]],[[4,[1]]]],[[[3,[[18,[1]]]]],[[4,[1]]]],[[[3,[[19,[1]]]]],[[4,[1]]]],[[[3,[[20,[1]]]]],[[4,[1]]]],[[[3,[[21,[1]]]]],[[4,[1]]]],[[[3,[[22,[1]]]]],[[4,[1]]]],[[[3,[[23,[1]]]]],[[4,[1]]]],[[[3,[[24,[1]]]]],[[4,[1]]]],[[[3,[[25,[1]]]]],[[4,[1]]]],[[[3,[[26,[1]]]]],[[4,[1]]]],[[[3,[[27,[1]]]]],[[4,[1]]]],[[[3,[[28,[1]]]]],[[4,[1]]]],[[[3,[[29,[1]]]]],[[4,[1]]]],[[[3,[[30,[1]]]]],[[4,[1]]]],[[[3,[[31,[1]]]]],[[4,[1]]]],[[[3,[[32,[1]]]]],[[4,[1]]]],[[[3,[[33,[1]]]]],[[4,[1]]]],[[[3,[[34,[1]]]]],[[4,[1]]]],[[[3,[[35,[1]]]]],[[4,[1]]]],[[[3,[[36,[1]]]]],[[4,[1]]]],[[[3,[[37,[1]]]]],[[4,[1]]]],[[[3,[[38,[1]]]]],[[4,[1]]]],[[[3,[[39,[1]]]]],[[4,[1]]]],[[[40,[[28,[1]]]]],[[4,[1]]]],[[[40,[[32,[1]]]]],[[4,[1]]]],[[[40,[[19,[1]]]]],[[4,[1]]]],[[[40,[[35,[1]]]]],[[4,[1]]]],[[[40,[[30,[1]]]]],[[4,[1]]]],[[[40,[[23,[1]]]]],[[4,[1]]]],[[[40,[[11,[1]]]]],[[4,[1]]]],[[[40,[[16,[1]]]]],[[4,[1]]]],[[[40,[[38,[1]]]]],[[4,[1]]]],[[[40,[[27,[1]]]]],[[4,[1]]]],[[[40,[[22,[1]]]]],[[4,[1]]]],[[[40,[[34,[1]]]]],[[4,[1]]]],[[[40,[[9,[1]]]]],[[4,[1]]]],[[[40,[[21,[1]]]]],[[4,[1]]]],[[[40,[[10,[1]]]]],[[4,[1]]]],[[[40,[[2,[1]]]]],[[4,[1]]]],[[[40,[[8,[1]]]]],[[4,[1]]]],[[[40,[[26,[1]]]]],[[4,[1]]]],[[[40,[[7,[1]]]]],[[4,[1]]]],[[[40,[[20,[1]]]]],[[4,[1]]]],[[[40,[[6,[1]]]]],[[4,[1]]]],[[[40,[[24,[1]]]]],[[4,[1]]]],[[[40,[[5,[1]]]]],[[4,[1]]]],[[[40,[[31,[1]]]]],[[4,[1]]]],[[[40,[[33,[1]]]]],[[4,[1]]]],[[[40,[[14,[1]]]]],[[4,[1]]]],[[[40,[[18,[1]]]]],[[4,[1]]]],[[[40,[[15,[1]]]]],[[4,[1]]]],[[[40,[[25,[1]]]]],[[4,[1]]]],[[[40,[[36,[1]]]]],[[4,[1]]]],[[[40,[[17,[1]]]]],[[4,[1]]]],[[[40,[[29,[1]]]]],[[4,[1]]]],[[[40,[[39,[1]]]]],[[4,[1]]]],[[[40,[[37,[1]]]]],[[4,[1]]]],[[[40,[[13,[1]]]]],[[4,[1]]]],[[[40,[[12,[1]]]]],[[4,[1]]]],[10,4],[38,4],[32,4],[30,4],[5,4],[25,4],[14,4],[21,4],[15,4],[34,4],[22,4],[27,4],[35,4],[29,4],[13,4],[9,4],[33,4],[6,4],[23,4],[19,4],[31,4],[24,4],[11,4],[36,4],[39,4],[20,4],[28,4],[26,4],[18,4],[2,4],[16,4],[37,4],[17,4],[7,4],[8,4],[12,4],[[[3,[[16,[1]]]]],[[4,[1]]]],[[[3,[[38,[1]]]]],[[4,[1]]]],[[[3,[[35,[1]]]]],[[4,[1]]]],[[[3,[[39,[1]]]]],[[4,[1]]]],[[[3,[[27,[1]]]]],[[4,[1]]]],[[[3,[[24,[1]]]]],[[4,[1]]]],[[[3,[[34,[1]]]]],[[4,[1]]]],[[[3,[[18,[1]]]]],[[4,[1]]]],[[[3,[[19,[1]]]]],[[4,[1]]]],[[[3,[[21,[1]]]]],[[4,[1]]]],[[[3,[[13,[1]]]]],[[4,[1]]]],[[[3,[[10,[1]]]]],[[4,[1]]]],[[[3,[[28,[1]]]]],[[4,[1]]]],[[[3,[[2,[1]]]]],[[4,[1]]]],[[[3,[[23,[1]]]]],[[4,[1]]]],[[[3,[[33,[1]]]]],[[4,[1]]]],[[[3,[[26,[1]]]]],[[4,[1]]]],[[[3,[[5,[1]]]]],[[4,[1]]]],[[[3,[[6,[1]]]]],[[4,[1]]]],[[[3,[[15,[1]]]]],[[4,[1]]]],[[[3,[[14,[1]]]]],[[4,[1]]]],[[[3,[[12,[1]]]]],[[4,[1]]]],[[[3,[[11,[1]]]]],[[4,[1]]]],[[[3,[[25,[1]]]]],[[4,[1]]]],[[[3,[[7,[1]]]]],[[4,[1]]]],[[[3,[[32,[1]]]]],[[4,[1]]]],[[[3,[[9,[1]]]]],[[4,[1]]]],[[[3,[[30,[1]]]]],[[4,[1]]]],[[[3,[[31,[1]]]]],[[4,[1]]]],[[[3,[[8,[1]]]]],[[4,[1]]]],[[[3,[[36,[1]]]]],[[4,[1]]]],[[[3,[[17,[1]]]]],[[4,[1]]]],[[[3,[[29,[1]]]]],[[4,[1]]]],[[[3,[[37,[1]]]]],[[4,[1]]]],[[[3,[[22,[1]]]]],[[4,[1]]]],[[[3,[[20,[1]]]]],[[4,[1]]]],[[[40,[[31,[1]]]]],[[4,[1]]]],[[[40,[[2,[1]]]]],[[4,[1]]]],[[[40,[[34,[1]]]]],[[4,[1]]]],[[[40,[[16,[1]]]]],[[4,[1]]]],[[[40,[[18,[1]]]]],[[4,[1]]]],[[[40,[[30,[1]]]]],[[4,[1]]]],[[[40,[[12,[1]]]]],[[4,[1]]]],[[[40,[[7,[1]]]]],[[4,[1]]]],[[[40,[[24,[1]]]]],[[4,[1]]]],[[[40,[[10,[1]]]]],[[4,[1]]]],[[[40,[[35,[1]]]]],[[4,[1]]]],[[[40,[[39,[1]]]]],[[4,[1]]]],[[[40,[[22,[1]]]]],[[4,[1]]]],[[[40,[[9,[1]]]]],[[4,[1]]]],[[[40,[[19,[1]]]]],[[4,[1]]]],[[[40,[[14,[1]]]]],[[4,[1]]]],[[[40,[[17,[1]]]]],[[4,[1]]]],[[[40,[[29,[1]]]]],[[4,[1]]]],[[[40,[[8,[1]]]]],[[4,[1]]]],[[[40,[[13,[1]]]]],[[4,[1]]]],[[[40,[[23,[1]]]]],[[4,[1]]]],[[[40,[[25,[1]]]]],[[4,[1]]]],[[[40,[[27,[1]]]]],[[4,[1]]]],[[[40,[[21,[1]]]]],[[4,[1]]]],[[[40,[[33,[1]]]]],[[4,[1]]]],[[[40,[[32,[1]]]]],[[4,[1]]]],[[[40,[[26,[1]]]]],[[4,[1]]]],[[[40,[[5,[1]]]]],[[4,[1]]]],[[[40,[[20,[1]]]]],[[4,[1]]]],[[[40,[[15,[1]]]]],[[4,[1]]]],[[[40,[[6,[1]]]]],[[4,[1]]]],[[[40,[[11,[1]]]]],[[4,[1]]]],[[[40,[[37,[1]]]]],[[4,[1]]]],[[[40,[[38,[1]]]]],[[4,[1]]]],[[[40,[[36,[1]]]]],[[4,[1]]]],[[[40,[[28,[1]]]]],[[4,[1]]]],[10,4],[38,4],[32,4],[30,4],[5,4],[25,4],[14,4],[21,4],[15,4],[34,4],[22,4],[27,4],[35,4],[29,4],[13,4],[9,4],[33,4],[6,4],[23,4],[19,4],[31,4],[24,4],[11,4],[36,4],[39,4],[20,4],[28,4],[26,4],[18,4],[2,4],[16,4],[37,4],[17,4],[7,4],[8,4],[12,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[3,[[0,[41,42]]]]],[[3,[[0,[41,42]]]]]],[[[40,[[0,[41,42]]]]],[[40,[[0,[41,42]]]]]],[43,43],[[[10,[41]]],[[10,[41]]]],[[[38,[41]]],[[38,[41]]]],[[[32,[41]]],[[32,[41]]]],[[[30,[41]]],[[30,[41]]]],[[[5,[41]]],[[5,[41]]]],[[[25,[41]]],[[25,[41]]]],[[[14,[41]]],[[14,[41]]]],[[[21,[41]]],[[21,[41]]]],[[[15,[41]]],[[15,[41]]]],[[[34,[41]]],[[34,[41]]]],[[[22,[41]]],[[22,[41]]]],[[[27,[41]]],[[27,[41]]]],[[[35,[41]]],[[35,[41]]]],[[[29,[41]]],[[29,[41]]]],[[[13,[41]]],[[13,[41]]]],[[[9,[41]]],[[9,[41]]]],[[[33,[41]]],[[33,[41]]]],[[[6,[41]]],[[6,[41]]]],[[[23,[41]]],[[23,[41]]]],[[[19,[41]]],[[19,[41]]]],[[[31,[41]]],[[31,[41]]]],[[[24,[41]]],[[24,[41]]]],[[[11,[41]]],[[11,[41]]]],[[[36,[41]]],[[36,[41]]]],[[[39,[41]]],[[39,[41]]]],[[[20,[41]]],[[20,[41]]]],[[[28,[41]]],[[28,[41]]]],[[[26,[41]]],[[26,[41]]]],[[[18,[41]]],[[18,[41]]]],[[[2,[41]]],[[2,[41]]]],[[[16,[41]]],[[16,[41]]]],[[[37,[41]]],[[37,[41]]]],[[[17,[41]]],[[17,[41]]]],[[[7,[41]]],[[7,[41]]]],[[[8,[41]]],[[8,[41]]]],[[[12,[41]]],[[12,[41]]]],[[[10,[44]],[10,[44]]],45],[[[38,[44]],[38,[44]]],45],[[[32,[44]],[32,[44]]],45],[[[30,[44]],[30,[44]]],45],[[[5,[44]],[5,[44]]],45],[[[25,[44]],[25,[44]]],45],[[[14,[44]],[14,[44]]],45],[[[21,[44]],[21,[44]]],45],[[[15,[44]],[15,[44]]],45],[[[34,[44]],[34,[44]]],45],[[[22,[44]],[22,[44]]],45],[[[27,[44]],[27,[44]]],45],[[[35,[44]],[35,[44]]],45],[[[29,[44]],[29,[44]]],45],[[[13,[44]],[13,[44]]],45],[[[9,[44]],[9,[44]]],45],[[[33,[44]],[33,[44]]],45],[[[6,[44]],[6,[44]]],45],[[[23,[44]],[23,[44]]],45],[[[19,[44]],[19,[44]]],45],[[[31,[44]],[31,[44]]],45],[[[24,[44]],[24,[44]]],45],[[[11,[44]],[11,[44]]],45],[[[36,[44]],[36,[44]]],45],[[[39,[44]],[39,[44]]],45],[[[20,[44]],[20,[44]]],45],[[[28,[44]],[28,[44]]],45],[[[26,[44]],[26,[44]]],45],[[[18,[44]],[18,[44]]],45],[[[2,[44]],[2,[44]]],45],[[[16,[44]],[16,[44]]],45],[[[37,[44]],[37,[44]]],45],[[[17,[44]],[17,[44]]],45],[[[7,[44]],[7,[44]]],45],[[[8,[44]],[8,[44]]],45],[[[12,[44]],[12,[44]]],45],0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[46,42]]]],[3,[[0,[46,42]]]]],47],[[[40,[[0,[46,42]]]],[40,[[0,[46,42]]]]],47],[[43,43],47],[[[10,[46]],[10,[46]]],47],[[[38,[46]],[38,[46]]],47],[[[32,[46]],[32,[46]]],47],[[[30,[46]],[30,[46]]],47],[[[5,[46]],[5,[46]]],47],[[[25,[46]],[25,[46]]],47],[[[14,[46]],[14,[46]]],47],[[[21,[46]],[21,[46]]],47],[[[15,[46]],[15,[46]]],47],[[[34,[46]],[34,[46]]],47],[[[22,[46]],[22,[46]]],47],[[[27,[46]],[27,[46]]],47],[[[35,[46]],[35,[46]]],47],[[[29,[46]],[29,[46]]],47],[[[13,[46]],[13,[46]]],47],[[[9,[46]],[9,[46]]],47],[[[33,[46]],[33,[46]]],47],[[[6,[46]],[6,[46]]],47],[[[23,[46]],[23,[46]]],47],[[[19,[46]],[19,[46]]],47],[[[31,[46]],[31,[46]]],47],[[[24,[46]],[24,[46]]],47],[[[11,[46]],[11,[46]]],47],[[[36,[46]],[36,[46]]],47],[[[39,[46]],[39,[46]]],47],[[[20,[46]],[20,[46]]],47],[[[28,[46]],[28,[46]]],47],[[[26,[46]],[26,[46]]],47],[[[18,[46]],[18,[46]]],47],[[[2,[46]],[2,[46]]],47],[[[16,[46]],[16,[46]]],47],[[[37,[46]],[37,[46]]],47],[[[17,[46]],[17,[46]]],47],[[[7,[46]],[7,[46]]],47],[[[8,[46]],[8,[46]]],47],[[[12,[46]],[12,[46]]],47],[[[3,[[0,[48,42]]]],49],50],[[[40,[[0,[48,42]]]],49],50],[[43,49],50],[[[10,[48]],49],50],[[[38,[48]],49],50],[[[32,[48]],49],50],[[[30,[48]],49],50],[[[5,[48]],49],50],[[[25,[48]],49],50],[[[14,[48]],49],50],[[[21,[48]],49],50],[[[15,[48]],49],50],[[[34,[48]],49],50],[[[22,[48]],49],50],[[[27,[48]],49],50],[[[35,[48]],49],50],[[[29,[48]],49],50],[[[13,[48]],49],50],[[[9,[48]],49],50],[[[33,[48]],49],50],[[[6,[48]],49],50],[[[23,[48]],49],50],[[[19,[48]],49],50],[[[31,[48]],49],50],[[[24,[48]],49],50],[[[11,[48]],49],50],[[[36,[48]],49],50],[[[39,[48]],49],50],[[[20,[48]],49],50],[[[28,[48]],49],50],[[[26,[48]],49],50],[[[18,[48]],49],50],[[[2,[48]],49],50],[[[16,[48]],49],50],[[[37,[48]],49],50],[[[17,[48]],49],50],[[[7,[48]],49],50],[[[8,[48]],49],50],[[[12,[48]],49],50],[[[4,[1]]],[[3,[[14,[1]]]]]],[[[4,[1]]],[[3,[[19,[1]]]]]],[[[4,[1]]],[[3,[[32,[1]]]]]],[[]],[[[4,[1]]],[[3,[[20,[1]]]]]],[[[4,[1]]],[[3,[[16,[1]]]]]],[[[4,[1]]],[[3,[[35,[1]]]]]],[[[4,[1]]],[[3,[[38,[1]]]]]],[[[4,[1]]],[[3,[[34,[1]]]]]],[[[4,[1]]],[[3,[[27,[1]]]]]],[[[4,[1]]],[[3,[[10,[1]]]]]],[[[4,[1]]],[[3,[[29,[1]]]]]],[[[4,[1]]],[[3,[[9,[1]]]]]],[[[4,[1]]],[[3,[[5,[1]]]]]],[[[4,[1]]],[[3,[[33,[1]]]]]],[[[4,[1]]],[[3,[[26,[1]]]]]],[[[4,[1]]],[[3,[[15,[1]]]]]],[[[4,[1]]],[[3,[[39,[1]]]]]],[[[4,[1]]],[[3,[[28,[1]]]]]],[[[4,[1]]],[[3,[[18,[1]]]]]],[[[4,[1]]],[[3,[[8,[1]]]]]],[[[4,[1]]],[[3,[[12,[1]]]]]],[[[4,[1]]],[[3,[[11,[1]]]]]],[[[4,[1]]],[[3,[[25,[1]]]]]],[[[4,[1]]],[[3,[[24,[1]]]]]],[[[4,[1]]],[[3,[[31,[1]]]]]],[[[4,[1]]],[[3,[[13,[1]]]]]],[[[4,[1]]],[[3,[[36,[1]]]]]],[[[4,[1]]],[[3,[[22,[1]]]]]],[[[4,[1]]],[[3,[[17,[1]]]]]],[[[4,[1]]],[[3,[[6,[1]]]]]],[[[4,[1]]],[[3,[[30,[1]]]]]],[[[4,[1]]],[[3,[[7,[1]]]]]],[[[4,[1]]],[[3,[[37,[1]]]]]],[[[4,[1]]],[[3,[[23,[1]]]]]],[[[4,[1]]],[[3,[[2,[1]]]]]],[[[4,[1]]],[[3,[[21,[1]]]]]],[[[4,[1]]],[[40,[[5,[1]]]]]],[[[4,[1]]],[[40,[[13,[1]]]]]],[[[4,[1]]],[[40,[[23,[1]]]]]],[[[4,[1]]],[[40,[[2,[1]]]]]],[[[4,[1]]],[[40,[[18,[1]]]]]],[[[4,[1]]],[[40,[[34,[1]]]]]],[[[4,[1]]],[[40,[[37,[1]]]]]],[[[4,[1]]],[[40,[[35,[1]]]]]],[[[4,[1]]],[[40,[[26,[1]]]]]],[[[4,[1]]],[[40,[[38,[1]]]]]],[[[4,[1]]],[[40,[[10,[1]]]]]],[[[4,[1]]],[[40,[[30,[1]]]]]],[[[4,[1]]],[[40,[[19,[1]]]]]],[[[4,[1]]],[[40,[[7,[1]]]]]],[[[4,[1]]],[[40,[[6,[1]]]]]],[[[4,[1]]],[[40,[[27,[1]]]]]],[[[4,[1]]],[[40,[[28,[1]]]]]],[[]],[[[4,[1]]],[[40,[[14,[1]]]]]],[[[4,[1]]],[[40,[[32,[1]]]]]],[[[4,[1]]],[[40,[[8,[1]]]]]],[[[4,[1]]],[[40,[[33,[1]]]]]],[[[4,[1]]],[[40,[[20,[1]]]]]],[[[4,[1]]],[[40,[[25,[1]]]]]],[[[4,[1]]],[[40,[[29,[1]]]]]],[[[4,[1]]],[[40,[[15,[1]]]]]],[[[4,[1]]],[[40,[[21,[1]]]]]],[[[4,[1]]],[[40,[[31,[1]]]]]],[[[4,[1]]],[[40,[[39,[1]]]]]],[[[4,[1]]],[[40,[[9,[1]]]]]],[[[4,[1]]],[[40,[[11,[1]]]]]],[[[4,[1]]],[[40,[[36,[1]]]]]],[[[4,[1]]],[[40,[[12,[1]]]]]],[[[4,[1]]],[[40,[[22,[1]]]]]],[[[4,[1]]],[[40,[[24,[1]]]]]],[[[4,[1]]],[[40,[[17,[1]]]]]],[[[4,[1]]],[[40,[[16,[1]]]]]],[[]],[[]],[[[3,[[10,[1]]]]],[[10,[1]]]],[4,10],[[[40,[[10,[1]]]]],[[10,[1]]]],[4,38],[[[40,[[38,[1]]]]],[[38,[1]]]],[[[3,[[38,[1]]]]],[[38,[1]]]],[[]],[[[3,[[32,[1]]]]],[[32,[1]]]],[[]],[[[40,[[32,[1]]]]],[[32,[1]]]],[4,32],[4,30],[[]],[[[3,[[30,[1]]]]],[[30,[1]]]],[[[40,[[30,[1]]]]],[[30,[1]]]],[4,5],[[[40,[[5,[1]]]]],[[5,[1]]]],[[[3,[[5,[1]]]]],[[5,[1]]]],[[]],[4,25],[[]],[[[3,[[25,[1]]]]],[[25,[1]]]],[[[40,[[25,[1]]]]],[[25,[1]]]],[[[40,[[14,[1]]]]],[[14,[1]]]],[[]],[4,14],[[[3,[[14,[1]]]]],[[14,[1]]]],[[[40,[[21,[1]]]]],[[21,[1]]]],[[]],[[[3,[[21,[1]]]]],[[21,[1]]]],[4,21],[[[40,[[15,[1]]]]],[[15,[1]]]],[[]],[4,15],[[[3,[[15,[1]]]]],[[15,[1]]]],[[[40,[[34,[1]]]]],[[34,[1]]]],[[]],[[[3,[[34,[1]]]]],[[34,[1]]]],[4,34],[[[40,[[22,[1]]]]],[[22,[1]]]],[4,22],[[]],[[[3,[[22,[1]]]]],[[22,[1]]]],[4,27],[[[40,[[27,[1]]]]],[[27,[1]]]],[[[3,[[27,[1]]]]],[[27,[1]]]],[[]],[[[3,[[35,[1]]]]],[[35,[1]]]],[4,35],[[[40,[[35,[1]]]]],[[35,[1]]]],[[]],[[[40,[[29,[1]]]]],[[29,[1]]]],[[[3,[[29,[1]]]]],[[29,[1]]]],[[]],[4,29],[[[3,[[13,[1]]]]],[[13,[1]]]],[4,13],[[[40,[[13,[1]]]]],[[13,[1]]]],[[]],[[]],[[[3,[[9,[1]]]]],[[9,[1]]]],[4,9],[[[40,[[9,[1]]]]],[[9,[1]]]],[[[40,[[33,[1]]]]],[[33,[1]]]],[[]],[[[3,[[33,[1]]]]],[[33,[1]]]],[4,33],[[[40,[[6,[1]]]]],[[6,[1]]]],[[]],[[[3,[[6,[1]]]]],[[6,[1]]]],[4,6],[[[3,[[23,[1]]]]],[[23,[1]]]],[[[40,[[23,[1]]]]],[[23,[1]]]],[[]],[4,23],[4,19],[[[40,[[19,[1]]]]],[[19,[1]]]],[[]],[[[3,[[19,[1]]]]],[[19,[1]]]],[[[40,[[31,[1]]]]],[[31,[1]]]],[4,31],[[[3,[[31,[1]]]]],[[31,[1]]]],[[]],[[[3,[[24,[1]]]]],[[24,[1]]]],[[[40,[[24,[1]]]]],[[24,[1]]]],[[]],[4,24],[4,11],[[]],[[[3,[[11,[1]]]]],[[11,[1]]]],[[[40,[[11,[1]]]]],[[11,[1]]]],[[[3,[[36,[1]]]]],[[36,[1]]]],[[]],[[[40,[[36,[1]]]]],[[36,[1]]]],[4,36],[[[3,[[39,[1]]]]],[[39,[1]]]],[4,39],[[]],[[[40,[[39,[1]]]]],[[39,[1]]]],[4,20],[[[40,[[20,[1]]]]],[[20,[1]]]],[[[3,[[20,[1]]]]],[[20,[1]]]],[[]],[[[40,[[28,[1]]]]],[[28,[1]]]],[[]],[4,28],[[[3,[[28,[1]]]]],[[28,[1]]]],[4,26],[[]],[[[3,[[26,[1]]]]],[[26,[1]]]],[[[40,[[26,[1]]]]],[[26,[1]]]],[4,18],[[[40,[[18,[1]]]]],[[18,[1]]]],[[[3,[[18,[1]]]]],[[18,[1]]]],[[]],[[]],[4,2],[[[40,[[2,[1]]]]],[[2,[1]]]],[[[3,[[2,[1]]]]],[[2,[1]]]],[[[40,[[16,[1]]]]],[[16,[1]]]],[4,16],[[]],[[[3,[[16,[1]]]]],[[16,[1]]]],[[[40,[[37,[1]]]]],[[37,[1]]]],[4,37],[[[3,[[37,[1]]]]],[[37,[1]]]],[[]],[4,17],[[[3,[[17,[1]]]]],[[17,[1]]]],[[]],[[[40,[[17,[1]]]]],[[17,[1]]]],[[[3,[[7,[1]]]]],[[7,[1]]]],[4,7],[[]],[[[40,[[7,[1]]]]],[[7,[1]]]],[4,8],[[]],[[[40,[[8,[1]]]]],[[8,[1]]]],[[[3,[[8,[1]]]]],[[8,[1]]]],[[]],[4,12],[[[3,[[12,[1]]]]],[[12,[1]]]],[[[40,[[12,[1]]]]],[[12,[1]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[51,42]]]],52]],[[[40,[[0,[51,42]]]],52]],[[43,52]],[[[10,[51]],52]],[[[38,[51]],52]],[[[32,[51]],52]],[[[30,[51]],52]],[[[5,[51]],52]],[[[25,[51]],52]],[[[14,[51]],52]],[[[21,[51]],52]],[[[15,[51]],52]],[[[34,[51]],52]],[[[22,[51]],52]],[[[27,[51]],52]],[[[35,[51]],52]],[[[29,[51]],52]],[[[13,[51]],52]],[[[9,[51]],52]],[[[33,[51]],52]],[[[6,[51]],52]],[[[23,[51]],52]],[[[19,[51]],52]],[[[31,[51]],52]],[[[24,[51]],52]],[[[11,[51]],52]],[[[36,[51]],52]],[[[39,[51]],52]],[[[20,[51]],52]],[[[28,[51]],52]],[[[26,[51]],52]],[[[18,[51]],52]],[[[2,[51]],52]],[[[16,[51]],52]],[[[37,[51]],52]],[[[17,[51]],52]],[[[7,[51]],52]],[[[8,[51]],52]],[[[12,[51]],52]],0,0,[[[3,[[21,[1]]]]],[[4,[1]]]],[[[3,[[30,[1]]]]],[[4,[1]]]],[[[3,[[28,[1]]]]],[[4,[1]]]],[[[3,[[34,[1]]]]],[[4,[1]]]],[[[3,[[39,[1]]]]],[[4,[1]]]],[[[3,[[11,[1]]]]],[[4,[1]]]],[[[3,[[29,[1]]]]],[[4,[1]]]],[[[3,[[25,[1]]]]],[[4,[1]]]],[[[3,[[15,[1]]]]],[[4,[1]]]],[[[3,[[8,[1]]]]],[[4,[1]]]],[[[3,[[38,[1]]]]],[[4,[1]]]],[[[3,[[13,[1]]]]],[[4,[1]]]],[[[3,[[16,[1]]]]],[[4,[1]]]],[[[3,[[9,[1]]]]],[[4,[1]]]],[[[3,[[33,[1]]]]],[[4,[1]]]],[[[3,[[18,[1]]]]],[[4,[1]]]],[[[3,[[32,[1]]]]],[[4,[1]]]],[[[3,[[2,[1]]]]],[[4,[1]]]],[[[3,[[19,[1]]]]],[[4,[1]]]],[[[3,[[23,[1]]]]],[[4,[1]]]],[[[3,[[22,[1]]]]],[[4,[1]]]],[[[3,[[36,[1]]]]],[[4,[1]]]],[[[3,[[20,[1]]]]],[[4,[1]]]],[[[3,[[14,[1]]]]],[[4,[1]]]],[[[3,[[37,[1]]]]],[[4,[1]]]],[[[3,[[12,[1]]]]],[[4,[1]]]],[[[3,[[26,[1]]]]],[[4,[1]]]],[[[3,[[17,[1]]]]],[[4,[1]]]],[[[3,[[5,[1]]]]],[[4,[1]]]],[[[3,[[31,[1]]]]],[[4,[1]]]],[[[3,[[35,[1]]]]],[[4,[1]]]],[[[3,[[24,[1]]]]],[[4,[1]]]],[[[3,[[6,[1]]]]],[[4,[1]]]],[[[3,[[27,[1]]]]],[[4,[1]]]],[[]],[[[3,[[7,[1]]]]],[[4,[1]]]],[[[3,[[10,[1]]]]],[[4,[1]]]],[[[40,[[13,[1]]]]],[[4,[1]]]],[[[40,[[39,[1]]]]],[[4,[1]]]],[[[40,[[38,[1]]]]],[[4,[1]]]],[[[40,[[7,[1]]]]],[[4,[1]]]],[[[40,[[24,[1]]]]],[[4,[1]]]],[[[40,[[25,[1]]]]],[[4,[1]]]],[[[40,[[30,[1]]]]],[[4,[1]]]],[[[40,[[2,[1]]]]],[[4,[1]]]],[[[40,[[31,[1]]]]],[[4,[1]]]],[[[40,[[14,[1]]]]],[[4,[1]]]],[[[40,[[9,[1]]]]],[[4,[1]]]],[[[40,[[10,[1]]]]],[[4,[1]]]],[[[40,[[16,[1]]]]],[[4,[1]]]],[[[40,[[23,[1]]]]],[[4,[1]]]],[[[40,[[18,[1]]]]],[[4,[1]]]],[[[40,[[27,[1]]]]],[[4,[1]]]],[[[40,[[34,[1]]]]],[[4,[1]]]],[[]],[[[40,[[11,[1]]]]],[[4,[1]]]],[[[40,[[35,[1]]]]],[[4,[1]]]],[[[40,[[37,[1]]]]],[[4,[1]]]],[[[40,[[17,[1]]]]],[[4,[1]]]],[[[40,[[19,[1]]]]],[[4,[1]]]],[[[40,[[12,[1]]]]],[[4,[1]]]],[[[40,[[28,[1]]]]],[[4,[1]]]],[[[40,[[32,[1]]]]],[[4,[1]]]],[[[40,[[5,[1]]]]],[[4,[1]]]],[[[40,[[33,[1]]]]],[[4,[1]]]],[[[40,[[26,[1]]]]],[[4,[1]]]],[[[40,[[8,[1]]]]],[[4,[1]]]],[[[40,[[36,[1]]]]],[[4,[1]]]],[[[40,[[20,[1]]]]],[[4,[1]]]],[[[40,[[29,[1]]]]],[[4,[1]]]],[[[40,[[21,[1]]]]],[[4,[1]]]],[[[40,[[15,[1]]]]],[[4,[1]]]],[[[40,[[22,[1]]]]],[[4,[1]]]],[[[40,[[6,[1]]]]],[[4,[1]]]],[[]],[10,4],[[]],[38,4],[[]],[32,4],[[]],[[]],[30,4],[[]],[5,4],[[]],[25,4],[[]],[14,4],[[]],[21,4],[15,4],[[]],[34,4],[[]],[[]],[22,4],[[]],[27,4],[[]],[35,4],[29,4],[[]],[[]],[13,4],[[]],[9,4],[[]],[33,4],[[]],[6,4],[[]],[23,4],[[]],[19,4],[31,4],[[]],[[]],[24,4],[11,4],[[]],[[]],[36,4],[[]],[39,4],[20,4],[[]],[[]],[28,4],[26,4],[[]],[18,4],[[]],[2,4],[[]],[16,4],[[]],[[]],[37,4],[17,4],[[]],[[]],[7,4],[8,4],[[]],[[]],[12,4],[[]],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],0,0,0,0,0,0,0,[43,53],[[[10,[54]],[10,[54]]],[[55,[45]]]],[[[38,[54]],[38,[54]]],[[55,[45]]]],[[[32,[54]],[32,[54]]],[[55,[45]]]],[[[30,[54]],[30,[54]]],[[55,[45]]]],[[[5,[54]],[5,[54]]],[[55,[45]]]],[[[25,[54]],[25,[54]]],[[55,[45]]]],[[[14,[54]],[14,[54]]],[[55,[45]]]],[[[21,[54]],[21,[54]]],[[55,[45]]]],[[[15,[54]],[15,[54]]],[[55,[45]]]],[[[34,[54]],[34,[54]]],[[55,[45]]]],[[[22,[54]],[22,[54]]],[[55,[45]]]],[[[27,[54]],[27,[54]]],[[55,[45]]]],[[[35,[54]],[35,[54]]],[[55,[45]]]],[[[29,[54]],[29,[54]]],[[55,[45]]]],[[[13,[54]],[13,[54]]],[[55,[45]]]],[[[9,[54]],[9,[54]]],[[55,[45]]]],[[[33,[54]],[33,[54]]],[[55,[45]]]],[[[6,[54]],[6,[54]]],[[55,[45]]]],[[[23,[54]],[23,[54]]],[[55,[45]]]],[[[19,[54]],[19,[54]]],[[55,[45]]]],[[[31,[54]],[31,[54]]],[[55,[45]]]],[[[24,[54]],[24,[54]]],[[55,[45]]]],[[[11,[54]],[11,[54]]],[[55,[45]]]],[[[36,[54]],[36,[54]]],[[55,[45]]]],[[[39,[54]],[39,[54]]],[[55,[45]]]],[[[20,[54]],[20,[54]]],[[55,[45]]]],[[[28,[54]],[28,[54]]],[[55,[45]]]],[[[26,[54]],[26,[54]]],[[55,[45]]]],[[[18,[54]],[18,[54]]],[[55,[45]]]],[[[2,[54]],[2,[54]]],[[55,[45]]]],[[[16,[54]],[16,[54]]],[[55,[45]]]],[[[37,[54]],[37,[54]]],[[55,[45]]]],[[[17,[54]],[17,[54]]],[[55,[45]]]],[[[7,[54]],[7,[54]]],[[55,[45]]]],[[[8,[54]],[8,[54]]],[[55,[45]]]],[[[12,[54]],[12,[54]]],[[55,[45]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[8,"Copy"],[3,"Hsv"],[3,"Alpha"],[15,"array"],[3,"GenericColor3"],[3,"EncodedBt2020"],[3,"YPrimePbPr"],[3,"Yuv"],[3,"DciXYZPrime"],[3,"EncodedSrgb"],[3,"ICtCpHLG"],[3,"YCxCz"],[3,"DciP3"],[3,"Luminance"],[3,"AcesCg"],[3,"YCbCr"],[3,"YPbPr"],[3,"Hsl"],[3,"EncodedBt2100PQ"],[3,"CieLCh"],[3,"Luma"],[3,"AcesCc"],[3,"Bt2100"],[3,"ICtCpPQ"],[3,"GenericColor1"],[3,"Oklch"],[3,"AcesCct"],[3,"Oklab"],[3,"EncodedDisplayP3"],[3,"Rec709"],[3,"EncodedBt2100HLG"],[3,"EncodedRec709"],[3,"Bt2020"],[3,"Aces2065"],[3,"DisplayP3"],[3,"CieXYZ"],[3,"YPrimeCbCr"],[3,"LinearSrgb"],[3,"CieLab"],[3,"PremultipliedAlpha"],[8,"Clone"],[8,"ColorType"],[4,"Spaces"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[15,"usize"],[8,"PartialOrd"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"ColorInterop"]]},\
"colstodian":{"doc":"An opinionated color management library for games and …","t":"DIIQQSIQILLLOALLLLKLLLLALLKLLLLLLLLLLLLMLKLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAADLLLLLLMLDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMMLLLLLLLLLLLLLLLDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGIIIQIIQIIIQSSIQISIKKKKKKLKK","n":["Color","ColorEncoding","ColorInto","ComponentStruct","LinearSpace","NAME","PerceptualEncoding","Repr","WorkingEncoding","add","add_assign","as_ref","assert_eq_eps","basic_encodings","borrow","borrow_mut","clone","clone_into","color_into","color_into","deref","deref_mut","deserialize","details","div","div_assign","dst_transform_raw","eq","fmt","fmt","from","into","is_valid_bit_pattern","linear_srgb","linear_srgba","linear_srgba_premultiplied","mul","mul_assign","oklab","repr","serialize","src_transform_raw","srgb_f32","srgb_u8","srgba_f32","srgba_u8","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","LinearSrgb","LinearSrgbA","SrgbAU8","SrgbU8","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","composite","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","from","from","from","from","into","into","into","into","lerp","lerp","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","color","component_structs","encodings","linear_spaces","reprs","traits","Color","alpha_over","cast","convert","from_repr","lerp","perceptual_blend","repr","saturate","Lab","Rgb","RgbA","a","a","b","b","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","cast_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","g","g","into","into","into","l","r","r","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","LinearSrgb","LinearSrgbA","LinearSrgbAPremultiplied","Oklab","SrgbAF32","SrgbAU8","SrgbAU8Premultiplied","SrgbF32","SrgbU8","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","composite","composite","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","dst_transform_raw","from","from","from","from","from","into","into","into","into","into","lerp","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","src_transform_raw","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Aces2065","AcesCg","Bt2020","CieXYZ","DisplayP3","Srgb","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","into","into","into","into","into","into","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","linear_part_raw","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","F32ARepr","F32Repr","U8ARepr","U8Repr","AlphaOver","ColorEncoding","ColorRepr","ComponentStruct","ComponentStructFor","ConvertFrom","Element","LinearColorSpace","LinearConvertFromRaw","LinearInterpolate","LinearSpace","NAME","PRIMARIES","PerceptualEncoding","Repr","Saturate","WHITE_POINT","WorkingEncoding","cast","cast_mut","composite","dst_transform_raw","lerp","linear_part_raw","map_src","saturate","src_transform_raw"],"q":[[0,"colstodian"],[53,"colstodian::basic_encodings"],[96,"colstodian::details"],[102,"colstodian::details::color"],[111,"colstodian::details::component_structs"],[178,"colstodian::details::encodings"],[235,"colstodian::details::linear_spaces"],[295,"colstodian::details::reprs"],[299,"colstodian::details::traits"]],"d":["A strongly typed color, parameterized by a <code>ColorEncoding</code>.","A type that implements <code>ColorEncoding</code> represents a …","Like <code>Into</code> but specialized for use with <code>colstodian</code> <code>Color</code> …","The ‘bag of components’ this color encoding uses.","The <code>LinearColorSpace</code> used by this encoding.","Used in <code>Debug</code> and <code>Display</code> implementations.","Implemented by color encodings which are designed to be …","The raw data representation used by this encoding.","Marks a type as representing a color encoding in which it …","","","","Assert that <code>$left</code> and <code>$right</code> are equal within a margin of …","Contains a basic set of <code>ColorEncoding</code>s to get most people …","","","","","","","","","","Contains advanced usage details of the crate.","","","Convert from a <code>glam::Vec3</code> in <code>Self::LinearSpace</code> and …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a <code>Color</code> in the <code>LinearSrgb</code> encoding.","Create a <code>Color</code> in the <code>LinearSrgbA</code> encoding.","Create a <code>Color</code> in the <code>LinearSrgbAPremultiplied</code> encoding.","","","Create a <code>Color</code> in the <code>Oklab</code> color encoding.","The raw values of the color. Be careful when modifying …","","Convert from <code>Self::Repr</code> to a <code>glam::Vec3</code> in the …","Create a <code>Color</code> in the <code>SrgbF32</code> encoding.","Create a <code>Color</code> in the <code>SrgbU8</code> encoding.","Create a <code>Color</code> in the <code>SrgbAF32</code> encoding.","Create a <code>Color</code> in the <code>SrgbAU8</code> encoding.","","","","","","","","The linear form of the sRGB color encoding standard.","The linear form of the sRGB color encoding standard with a …","The fully-encoded form of the sRGB color encoding …","The fully-encoded form of the sRGB color encoding standard.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Contains the <code>Color</code> type and helper functions.","Structs that act as bags of named components which <code>Color</code>s …","Types representing different <code>ColorEncoding</code>s.","Types representing different <code>LinearColorSpace</code>s.","The underlying data representations (<code>ColorRepr</code>s) used by …","The traits which form the backbone of this crate.","A strongly typed color, parameterized by a <code>ColorEncoding</code>.","Alpha-composite <code>self</code> over <code>under</code>.","Interprets this color as <code>DstEnc</code>. Requires that <code>DstEnc</code>’s …","Converts <code>self</code> from one color encoding to another.","Creates a <code>Color</code> from the raw data representation of the …","Linearly interpolate from <code>self</code>’s value to <code>other</code>’s …","Blend <code>self</code>’s color values with the color values from …","The raw values of the color. Be careful when modifying …","Clamp the raw element values of <code>self</code> within the current …","A bag of components with names L, A, B. Some <code>Color</code>s with …","A bag of components with names R, G, B. Some <code>Color</code>s with …","A bag of components with names R, G, B, A. Some <code>Color</code>s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","The linear form of the sRGB color encoding standard.","The linear form of the sRGB color encoding standard with a …","The linear form of the sRGB color encoding standard with a …","A 32-bit-per-component version of the Oklab …","The non-linear sRGB color encoding (with OETF applied) in …","The fully-encoded form of the sRGB color encoding …","The fully-encoded form of the sRGB color encoding …","The non-linear sRGB color encoding (with OETF applied) in …","The fully-encoded form of the sRGB color encoding standard.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","A type representing the linear ACES 2065 (aka ACES …","A type representing the linear ACEScg color space.","A type representing the BT.2020 linear color space.","A type representing the reference CIE XYZ 1931 color space.","A type representing the linear part of the Apple Display …","A type representing the linear part of the sRGB color …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Just a <code>glam::Vec4</code> (also equivalent in layot to a <code>[f32; 4]</code>…","Just a <code>glam::Vec3</code> (also equivalent in layout to a <code>[f32; 3]</code>…","Just a <code>[u8; 4]</code>. Used for 8-bits-per-channel, four channel …","Just a <code>[u8; 3]</code>. Used for 8-bits-per-channel, three channel …","Implemented by color encodings that can do alpha …","A type that implements <code>ColorEncoding</code> represents a …","Implemented by the raw data representation of a color …","The ‘bag of components’ this color encoding uses.","Implementing this trait for a struct marks that it is safe …","A trait that marks <code>Self</code> as being a color encoding which is …","The type of a single element of this repr","A type that implements <code>LinearColorSpace</code> represents a color …","Performs the raw conversion from the <code>LinearColorSpace</code> …","Implemented by color encodings which can perform linear …","The <code>LinearColorSpace</code> used by this encoding.","Used in <code>Debug</code> and <code>Display</code> implementations.","","Implemented by color encodings which are designed to be …","The raw data representation used by this encoding.","Implemented by color encodings that can perform …","","Marks a type as representing a color encoding in which it …","","","","Convert from a <code>glam::Vec3</code> in <code>Self::LinearSpace</code> and …","","","If required or desired, perform a mapping of some kind to …","","Convert from <code>Self::Repr</code> to a <code>glam::Vec3</code> in the …"],"i":[0,0,0,1,1,1,0,1,0,3,3,3,0,0,3,3,3,3,39,3,3,3,3,0,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,19,21,12,13,19,21,12,13,13,19,21,12,13,19,21,12,13,19,21,12,13,12,13,19,21,12,13,19,21,12,13,19,21,12,13,19,21,12,13,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,32,34,29,32,34,29,32,34,29,32,34,29,29,32,32,34,34,29,29,32,32,34,34,29,32,34,29,32,34,29,32,34,29,29,32,32,34,34,29,32,34,29,32,29,32,34,34,29,32,29,32,34,29,32,34,29,32,34,29,32,34,29,32,34,0,0,0,0,0,0,0,0,0,17,20,38,14,15,17,20,38,14,15,38,14,17,20,38,14,15,17,20,38,14,15,17,20,38,14,15,15,17,20,38,14,15,17,20,38,14,15,17,20,38,14,15,17,20,38,14,15,0,0,0,0,0,0,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,40,40,41,41,42,42,43,43,44,44,45,45,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,0,0,0,0,0,0,0,1,0,0,46,0,0,0,1,1,47,0,1,0,47,0,48,48,24,1,25,49,4,27,1],"f":[0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[1]]]],0,0,[[]],[[]],[[[3,[1]]],[[3,[1]]]],[[]],[[]],[[[3,[1]]],[[3,[[0,[1,[4,[1]]]]]]]],[[[3,[1]]]],[[[3,[1]]]],[5,[[6,[[3,[1]]]]]],0,[[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]]],[[7,8]],[[[3,[1]],[3,[1]]],9],[[[3,[1]],10],11],[[[3,[1]],10],11],[[]],[[]],[[],9],[[8,8,8],[[3,[12]]]],[[8,8,8,8],[[3,[13]]]],[[8,8,8,8],[[3,[14]]]],[[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]]],[[8,8,8],[[3,[15]]]],0,[[[3,[1]],16],6],[[]],[[8,8,8],[[3,[17]]]],[[18,18,18],[[3,[19]]]],[[8,8,8,8],[[3,[20]]]],[[18,18,18,18],[[3,[21]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[]],[[],22],[[],6],[[],6],[[],23],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[13]],[3,[13]]],[[3,[13]]]],[[7,8]],[[7,8]],[[7,8]],[[7,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,3,8],3],[[3,3,8],3],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,[[[3,[[0,[1,24]]]],[3,[[0,[1,24]]]]],[[3,[[0,[1,24]]]]]],[[[3,[1]]],[[3,[1]]]],[[[3,[1]]],[[3,[[0,[1,[4,[1]]]]]]]],[[],[[3,[1]]]],[[[3,[[0,[1,25]]]],[3,[[0,[1,25]]]],8],[[3,[[0,[1,25]]]]]],[[[3,[[0,[1,26,25]]]],[3,[[0,[1,26,25]]]],8],[[3,[[0,[1,26,25]]]]]],0,[[[3,[[0,[1,27]]]]],[[3,[[0,[1,27]]]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[28,[[29,[18]]]],[30,[[29,[8]]]],[31,[[32,[18]]]],[33,[[32,[8]]]],[28,[[34,[18]]]],[30,[[34,[8]]]],[30,[[29,[8]]]],[28,[[29,[18]]]],[33,[[32,[8]]]],[31,[[32,[18]]]],[30,[[34,[8]]]],[28,[[34,[18]]]],[[[29,[35]]],[[29,[35]]]],[[[32,[35]]],[[32,[35]]]],[[[34,[35]]],[[34,[35]]]],[[]],[[]],[[]],[[[29,[36]],[29,[36]]],9],[[[32,[36]],[32,[36]]],9],[[[34,[36]],[34,[36]]],9],[[[29,[37]],10],11],[[[29,[37]],10],11],[[[32,[37]],10],11],[[[32,[37]],10],11],[[[34,[37]],10],11],[[[34,[37]],10],11],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[38]],[3,[38]]],[[3,[38]]]],[[[3,[14]],[3,[14]]],[[3,[14]]]],[[7,8]],[[7,8]],[[7,8]],[[7,8]],[[7,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,3,8],3],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[3,3],3],[[7,8]],[[3,3,8],3],[7],[[]],[[]],[[]]],"c":[],"p":[[8,"ColorEncoding"],[8,"WorkingEncoding"],[3,"Color"],[8,"ConvertFrom"],[8,"Deserializer"],[4,"Result"],[3,"Vec3"],[15,"f32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"LinearSrgb"],[3,"LinearSrgbA"],[3,"LinearSrgbAPremultiplied"],[3,"Oklab"],[8,"Serializer"],[3,"SrgbF32"],[15,"u8"],[3,"SrgbU8"],[3,"SrgbAF32"],[3,"SrgbAU8"],[3,"String"],[3,"TypeId"],[8,"AlphaOver"],[8,"LinearInterpolate"],[8,"PerceptualEncoding"],[8,"Saturate"],[6,"U8Repr"],[3,"Rgb"],[6,"F32Repr"],[6,"U8ARepr"],[3,"RgbA"],[6,"F32ARepr"],[3,"Lab"],[8,"Clone"],[8,"PartialEq"],[8,"Display"],[3,"SrgbAU8Premultiplied"],[8,"ColorInto"],[3,"Srgb"],[3,"CieXYZ"],[3,"Bt2020"],[3,"AcesCg"],[3,"Aces2065"],[3,"DisplayP3"],[8,"ColorRepr"],[8,"LinearColorSpace"],[8,"ComponentStructFor"],[8,"LinearConvertFromRaw"]]},\
"glam":{"doc":"glam","t":"ECCCNNNNNNALLLLLLLLAALLLALLALLLLADDDDDSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMSSSSDDSSSSSSSDDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDDDSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDDDDDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIQQIQQIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKSSSSSSDDDSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EulerRot","Vec2Swizzles","Vec3Swizzles","Vec4Swizzles","XYZ","XZY","YXZ","YZX","ZXY","ZYX","bool","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","equivalent","f32","f64","fmt","from","hash","i32","into","serialize","swizzles","to_owned","try_from","try_into","type_id","u32","BVec2","BVec3","BVec3A","BVec4","BVec4A","FALSE","FALSE","FALSE","FALSE","FALSE","TRUE","TRUE","TRUE","TRUE","TRUE","all","all","all","all","all","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","new","new","new","new","new","not","not","not","not","not","serialize","serialize","serialize","serialize","serialize","splat","splat","splat","splat","splat","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","w","x","x","x","y","y","y","z","z","AXES","AXES","AXES","AXES","Affine2","Affine3A","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","ONE","ONE","ONE","ONE","Quat","Vec2","Vec3","Vec3A","Vec4","W","X","X","X","X","Y","Y","Y","Y","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat3","add_mat4","angle_between","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec3","as_dvec3","as_dvec4","as_f64","as_ivec2","as_ivec3","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec3","as_uvec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col_mut","col_mut","col_mut","col_mut","conjugate","copysign","copysign","copysign","copysign","cross","cross","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp","extend","extend","extend","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","mat2","mat3","mat3a","mat4","matrix2","matrix3","max","max","max","max","max_element","max_element","max_element","max_element","min","min","min","min","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","quat","recip","recip","recip","recip","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate","round","round","round","round","row","row","row","row","select","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signum","signum","signum","signum","slerp","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","transpose","transpose","transpose","transpose","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec2","vec3","vec3a","vec4","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxzw","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzx","xzxw","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzyw","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzzw","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","y","y","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxzw","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yy","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyzw","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzx","yzxw","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzyw","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzzw","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","z","z_axis","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxx","zxxw","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxyw","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxzw","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zy","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyx","zyxw","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyyw","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyzw","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzx","zzxw","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzyw","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzzw","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","AXES","AXES","AXES","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat4","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_f32","as_ivec2","as_ivec3","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","col","col","col","col_mut","col_mut","col_mut","conjugate","copysign","copysign","copysign","cross","default","default","default","default","default","default","default","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","distance","distance","distance","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dquat","dvec2","dvec3","dvec4","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","extend","extend","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","matrix2","matrix3","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec4","neg","neg","neg","neg","neg","neg","neg","new","new","new","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","recip","recip","recip","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate","round","round","round","row","row","row","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signum","signum","signum","slerp","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point3","transform_point3","transform_vector2","transform_vector2","transform_vector3","transform_vector3","translation","translation","transpose","transpose","transpose","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","y","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","z","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","IVec2","IVec3","IVec4","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","copysign","copysign","copysign","cross","default","default","default","deserialize","deserialize","deserialize","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","ivec2","ivec3","ivec4","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate","select","select","select","serialize","serialize","serialize","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","ONE","ONE","ONE","UVec2","UVec3","UVec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","deserialize","deserialize","deserialize","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","select","select","select","serialize","serialize","serialize","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uvec2","uvec3","uvec4","w","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz"],"q":[[0,"glam"],[33,"glam::bool"],[212,"glam::f32"],[1849,"glam::f64"],[3145,"glam::i32"],[3988,"glam::swizzles"],[4481,"glam::u32"]],"d":["Rotation Helper  Euler rotation sequences.","","","","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","<code>bool</code> vector mask types. ","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","","","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","Returns the argument unchanged.","","<code>i32</code> vector types. ","Calls <code>U::from(self)</code>.","","Traits adding swizzle methods to all vector types. ","","","","","<code>u32</code> vector types. ","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","All false.","All false.","All false.","All false.","All false.","All true.","All true.","All true.","All true.","All true.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","All ones.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector with SIMD support.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","","","","","","","","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion and a 3D vector, returning the …","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","Adds two quaternions.","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","","","","","","","","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion and a 3D vector, returning the …","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","","","","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …if":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[],1],[2,[[3,[1]]]],[[1,1],4],[[],4],0,0,[[1,5],6],[[]],[[1,7]],0,[[]],[[1,8],3],0,[[]],[[],3],[[],3],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,4],[11,4],[12,4],[13,4],[14,4],[10,4],[11,4],[12,4],[13,4],[14,4],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[10,15],[11,15],[12,15],[13,15],[14,15],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[10,10],10],[[11,11],11],[[12,12],12],[[13,13],13],[[14,14],14],[[10,10]],[[11,11]],[[12,12]],[[13,13]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,10],[11,11],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[]],[[]],[[],10],[[],11],[[],12],[[],13],[[],14],[2,[[3,[10]]]],[2,[[3,[11]]]],[2,[[3,[12]]]],[2,[[3,[13]]]],[2,[[3,[14]]]],[[10,10],4],[[11,11],4],[[12,12],4],[[13,13],4],[[14,14],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[10,5],6],[[10,5],6],[[11,5],6],[[11,5],6],[[12,5],6],[[12,5],6],[[13,5],6],[[13,5],6],[[14,5],6],[[14,5],6],[[]],[[]],[[]],[[]],[[]],[[10,7]],[[11,7]],[[12,7]],[[13,7]],[[14,7]],[[]],[[]],[[]],[[]],[[]],[[4,4],10],[[4,4,4],11],[[4,4,4,4],12],[[4,4,4],13],[[4,4,4,4],14],[10,10],[11,11],[12,12],[13,13],[14,14],[[10,8],3],[[11,8],3],[[12,8],3],[[13,8],3],[[14,8],3],[4,10],[4,11],[4,12],[4,13],[4,14],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,17],[18,18],[19,19],[20,20],[[21,21,22],4],[[23,23,22],4],[[24,24,22],4],[[17,17,22],4],[[18,18,22],4],[[25,25,22],4],[[26,26,22],4],[[27,27,22],4],[[28,28,22],4],[[19,19,22],4],[[20,20,22],4],[[24,24]],[[17,17],17],[[17,22],17],[[18,22],18],[[18,18],18],[[25,25]],[[26,26]],[[27,27]],[[28,28],28],[[19,22],19],[[19,19],19],[[20,22],20],[[20,20],20],[[24,24]],[[17,22]],[[17,17]],[[18,18]],[[18,22]],[[25,25]],[[26,26]],[[27,27]],[[19,19]],[[19,22]],[[20,20]],[[20,22]],[[25,25],25],[[24,24],24],[[26,26],26],[[27,27],27],[[17,17],22],[[18,18],22],[[28,28],22],[[19,19],22],[18,18],[19,19],[18],[19],[18,18],[19,19],[25,29],[24,30],[26,30],[27,31],[17,32],[18,33],[19,33],[20,34],[28,35],[17,36],[18,37],[19,37],[20,38],[24,[[39,[22]]]],[17,[[39,[22]]]],[18,[[39,[22]]]],[25,[[39,[22]]]],[27,[[39,[22]]]],[19,[[39,[22]]]],[20,[[39,[22]]]],[24,[[39,[22]]]],[17,[[39,[22]]]],[18,[[39,[22]]]],[25,[[39,[22]]]],[27,[[39,[22]]]],[28,[[39,[22]]]],[19,[[39,[22]]]],[20,[[39,[22]]]],[17,40],[18,41],[19,41],[20,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[18,18],[19,19],[20,20],[[17,17,17],17],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[17,22,22],17],[[18,22,22],18],[[19,22,22],19],[[20,22,22],20],[[17,22],17],[[18,22],18],[[19,22],19],[[20,22],20],[[17,22],17],[[18,22],18],[[19,22],19],[[20,22],20],[21,21],[23,23],[24,24],[17,17],[18,18],[25,25],[26,26],[27,27],[28,28],[19,19],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,17],10],[[18,18],11],[[19,19],13],[[20,20],14],[[17,17],10],[[18,18],11],[[19,19],13],[[20,20],14],[[17,17],10],[[18,18],11],[[19,19],13],[[20,20],14],[[17,17],10],[[18,18],11],[[19,19],13],[[20,20],14],[[17,17],10],[[18,18],11],[[19,19],13],[[20,20],14],[[17,17],10],[[18,18],11],[[19,19],13],[[20,20],14],[[24,43],18],[[25,43],17],[[26,43],19],[[27,43],20],[[24,43],18],[[25,43],17],[[26,43],19],[[27,43],20],[28,28],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[18,18],18],[[19,19],19],[[],21],[[],23],[[],24],[[],17],[[],18],[[],25],[[],26],[[],27],[[],28],[[],19],[[],20],[21],[23],[25],[28],[19],[20],[21],[23],[25],[28],[19],[20],[2,[[3,[21]]]],[2,[[3,[23]]]],[2,[[3,[24]]]],[2,[[3,[17]]]],[2,[[3,[18]]]],[2,[[3,[25]]]],[2,[[3,[26]]]],[2,[[3,[27]]]],[2,[[3,[28]]]],[2,[[3,[19]]]],[2,[[3,[20]]]],[24,22],[25,22],[26,22],[27,22],[[17,17],22],[[18,18],22],[[19,19],22],[[20,20],22],[[17,17],22],[[18,18],22],[[19,19],22],[[20,20],22],[[17,17],17],[[17,22],17],[[18,18],18],[[18,22],18],[[28,22],28],[[19,22],19],[[19,19],19],[[20,22],20],[[20,20],20],[[17,17]],[[17,22]],[[18,18]],[[18,22]],[[19,22]],[[19,19]],[[20,20]],[[20,22]],[[17,17],22],[[18,18],22],[[28,28],22],[[19,19],22],[[20,20],22],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[21,21],4],[[23,23],4],[[24,24],4],[[17,17],4],[[18,18],4],[[25,25],4],[[26,26],4],[[27,27],4],[[28,28],4],[[19,19],4],[[20,20],4],[17,17],[18,18],[19,19],[20,20],[[17,22],18],[[18,22],20],[[19,22],20],[17,17],[18,18],[19,19],[20,20],[[21,5],6],[[21,5],6],[[23,5],6],[[23,5],6],[[24,5],6],[[24,5],6],[[17,5],6],[[17,5],6],[[18,5],6],[[18,5],6],[[25,5],6],[[25,5],6],[[26,5],6],[[26,5],6],[[27,5],6],[[27,5],6],[[28,5],6],[[28,5],6],[[19,5],6],[[19,5],6],[[20,5],6],[[20,5],6],[17,17],[18,18],[19,19],[20,20],[[]],[[]],[26,24],[21,24],[[]],[[],17],[[]],[[[39,[22]]],17],[[]],[[[39,[22]]],18],[19,18],[[],18],[[],18],[[]],[[]],[21,26],[24,26],[23,27],[[]],[[]],[20,19],[18,19],[[],19],[[],19],[44,19],[[[39,[22]]],19],[[]],[[],20],[28,20],[44,20],[[],20],[[[39,[22]]],20],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[23,28],[22,21],[22,24],[22,17],[22,25],[22,26],[[22,17],21],[[[39,[22]]],17],[[[39,[22]]],18],[[[39,[22]]],28],[[[39,[22]]],19],[[[39,[22]]],20],[[18,22],23],[[18,22],24],[[18,22],26],[[18,22],27],[[18,22],28],[[17,17,17],21],[[19,19,19,19],23],[[18,18,18],24],[[17,17],25],[[19,19,19],26],[[20,20,20,20],27],[[[39,[22]]],21],[[[39,[22]]],23],[[[39,[22]]],24],[[[39,[22]]],25],[[[39,[22]]],26],[[[39,[22]]],27],[[[39,[[39,[22]]]]],21],[[[39,[[39,[22]]]]],23],[[[39,[[39,[22]]]]],24],[[[39,[[39,[22]]]]],25],[[[39,[[39,[22]]]]],26],[[[39,[[39,[22]]]]],27],[[[45,[22]]],21],[[[45,[22]]],23],[[[45,[22]]],24],[[[45,[22]]],25],[[[45,[22]]],26],[[[45,[22]]],27],[18,24],[17,25],[18,26],[20,27],[[1,22,22,22],24],[[1,22,22,22],26],[[1,22,22,22],27],[[1,22,22,22],28],[25,21],[25,24],[25,26],[[25,17],21],[24,21],[24,23],[24,25],[24,27],[24,28],[[24,18],23],[26,21],[26,25],[26,27],[26,28],[27,23],[27,24],[27,26],[27,28],[28,23],[28,24],[28,26],[28,27],[[18,18],28],[[17,17],28],[[18,18],28],[[28,18],23],[[28,18],27],[22,23],[22,24],[22,26],[22,27],[22,28],[22,23],[22,24],[22,26],[22,27],[22,28],[22,23],[22,24],[22,26],[22,27],[22,28],[17,21],[18,23],[17,24],[17,26],[18,27],[[17,22],25],[[17,22,17],21],[[17,22,17],24],[[17,22,17],26],[[18,28,18],23],[[18,28,18],27],[18,28],[[[45,[22]]],17],[[[45,[22]]],18],[[[45,[22]]],28],[[[45,[22]]],19],[[[45,[22]]],20],[17,21],[18,23],[17,24],[17,26],[18,27],[20,28],[[22,22,22,22],28],[[17,43]],[[18,43]],[[19,43]],[[20,43]],[[17,43]],[[18,43]],[[19,43]],[[20,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[21,4],[23,4],[24,4],[17,4],[18,4],[25,4],[26,4],[27,4],[28,4],[19,4],[20,4],[21,4],[23,4],[24,4],[17,4],[18,4],[25,4],[26,4],[27,4],[28,4],[19,4],[20,4],[17,10],[18,11],[19,13],[20,14],[28,4],[17,15],[18,15],[19,15],[20,15],[17,4],[18,4],[28,4],[19,4],[20,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[17,22],[18,22],[28,22],[19,22],[20,22],[17,22],[18,22],[28,22],[19,22],[20,22],[17,22],[18,22],[28,22],[19,22],[20,22],[[17,17,22],17],[[18,18,22],18],[[28,28,22],28],[[19,19,22],19],[[20,20,22],20],[[18,18,18],23],[[18,18,18],27],[[18,18,18],23],[[18,18,18],27],[[18,18,18],23],[[18,18,18],27],[[18,18,18],23],[[18,18,18],27],[[17,17],25],[[18,18,18],24],[[19,19,19],26],[[20,20,20,20],27],0,0,[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[17,22],[18,22],[19,22],[20,22],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[17,22],[18,22],[19,22],[20,22],[[21,24]],[[21,26]],[[21,21]],[[23,27]],[[23,23]],[[24,19],19],[[24,22]],[[24,18]],[[24,21]],[[24,24]],[[17,17],17],[[17,22],17],[[18,22],18],[[18,18],18],[[25,25]],[[25,17]],[[25,22]],[[26,22]],[[26,26]],[[26,18],18],[[26,21]],[[26,19]],[[27,27]],[[27,23]],[[27,22]],[[27,20]],[[28,19]],[[28,18]],[[28,22],28],[[28,28],28],[[19,22],19],[[19,19],19],[[20,20],20],[[20,22],20],[[17,17,17],17],[[18,18,18],18],[[19,19,19],19],[[20,20,20],20],[[24,22]],[[24,24]],[[17,17]],[[17,22]],[[18,22]],[[18,18]],[[25,25]],[[25,22]],[[26,26]],[[26,22]],[[27,27]],[[27,22]],[[28,28]],[[19,19]],[[19,22]],[[20,22]],[[20,20]],[[25,25],25],[[24,24],24],[[26,26],26],[[27,27],27],[[28,28],28],[[24,22],24],[[25,22],25],[[26,22],26],[[27,22],27],[[25,17],17],[[24,18],18],[[26,18],18],[[28,18],18],[[24,19],19],[[26,19],19],[[28,19],19],[[27,20],20],[24],[17,17],[18,18],[25],[26],[27],[28,28],[19,19],[20,20],[[22,22],17],[[22,22,22],18],[[22,22,22],19],[[22,22,22,22],20],[17,17],[18,18],[28,28],[19,19],[20,20],[17,17],[18,18],[19,19],[20,20],[[22,22,22,22,22,22],27],[[22,22,22,22,22,22],27],[[22,22,22,22,22,22],27],[17,17],[[17,17],22],[[22,22,22],27],[[22,22,22],27],[[22,22,22],27],[[22,22,22],27],[[22,22,22,22],27],[[22,22,22,22],27],[[22,22,22,22],27],[[17,22],17],[[18,22],18],[[19,22],19],[[20,22],20],[46,21],[46,23],[46,24],[46,24],[46,17],[46,17],[46,18],[46,18],[46,25],[46,25],[46,26],[46,26],[46,27],[46,27],[46,28],[46,28],[46,19],[46,19],[46,20],[46,20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[27,18],18],[[22,22,22,22],28],[17,17],[18,18],[19,19],[20,20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[[18,18],18],[[19,19],19],[[20,20],20],[[17,17],17],[[17,22],17],[[18,22],18],[[18,18],18],[[19,22],19],[[19,19],19],[[20,20],20],[[20,22],20],[[17,17]],[[17,22]],[[18,22]],[[18,18]],[[19,22]],[[19,19]],[[20,22]],[[20,20]],[[17,17],17],[17,17],[18,18],[19,19],[20,20],[[24,43],18],[[25,43],17],[[26,43],19],[[27,43],20],[[10,17,17],17],[[11,18,18],18],[[13,19,19],19],[[14,20,20],20],[[21,8],3],[[23,8],3],[[24,8],3],[[17,8],3],[[18,8],3],[[25,8],3],[[26,8],3],[[27,8],3],[[28,8],3],[[19,8],3],[[20,8],3],[17,17],[18,18],[19,19],[20,20],[[28,28,22],28],[22,17],[22,18],[22,19],[22,20],[[24,24]],[[17,17],17],[[17,22],17],[[18,18],18],[[18,22],18],[[25,25]],[[26,26]],[[27,27]],[[28,28],28],[[19,19],19],[[19,22],19],[[20,20],20],[[20,22],20],[[24,24]],[[17,17]],[[17,22]],[[18,22]],[[18,18]],[[25,25]],[[26,26]],[[27,27]],[[19,22]],[[19,19]],[[20,20]],[[20,22]],[[25,25],25],[[24,24],24],[[26,26],26],[[27,27],27],[46,24],[46,24],[46,17],[46,17],[46,18],[46,18],[46,25],[46,25],[46,26],[46,26],[46,27],[46,27],[46,28],[46,28],[46,19],[46,19],[46,20],[46,20],[17,[[39,[22]]]],[18,[[39,[22]]]],[28,[[39,[22]]]],[19,[[39,[22]]]],[20,[[39,[22]]]],[28],[21,[[39,[22]]]],[23,[[39,[22]]]],[24,[[39,[22]]]],[25,[[39,[22]]]],[26,[[39,[22]]]],[27,[[39,[22]]]],[21,[[39,[[39,[22]]]]]],[23,[[39,[[39,[22]]]]]],[24,[[39,[[39,[22]]]]]],[25,[[39,[[39,[22]]]]]],[26,[[39,[[39,[22]]]]]],[27,[[39,[[39,[22]]]]]],[[28,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23],[27],[28,18],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[21,17],17],[[24,17],17],[[26,17],17],[[23,18],18],[[27,18],18],[[23,19],19],[[27,19],19],[[21,17],17],[[24,17],17],[[26,17],17],[[23,18],18],[[27,18],18],[[23,19],19],[[27,19],19],0,0,[24,24],[25,25],[26,26],[27,27],[18,17],[19,17],[20,18],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[17,[[47,[17]]]],[18,[[47,[18]]]],[19,[[47,[19]]]],[20,[[47,[20]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[22,22],17],[[22,22,22],18],[[22,22,22],19],[[22,22,22,22],20],0,[[21,[45,[22]]]],[[23,[45,[22]]]],[[24,[45,[22]]]],[[25,[45,[22]]]],[[26,[45,[22]]]],[[27,[45,[22]]]],[[17,[45,[22]]]],[[18,[45,[22]]]],[[28,[45,[22]]]],[[19,[45,[22]]]],[[20,[45,[22]]]],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],0,0,0,0,0,[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[28,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],0,0,0,0,0,[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,17],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[17,18],[18,18],[19,19],[20,18],[20,20],[17,20],[18,20],[19,20],[20,20],[17,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],0,0,0,0,[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[20,18],[20,20],[20,20],[20,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,17],[19,17],[20,17],[20,18],[20,20],[20,20],[20,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,18],[19,19],[20,18],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],[18,20],[19,20],[20,20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[32,32],[33,33],[34,34],[[48,48,49],4],[[50,50,49],4],[[29,29,49],4],[[30,30,49],4],[[31,31,49],4],[[35,35,49],4],[[32,32,49],4],[[33,33,49],4],[[34,34,49],4],[[29,29]],[[30,30]],[[31,31]],[[35,35],35],[[32,32],32],[[32,49],32],[[33,49],33],[[33,33],33],[[34,34],34],[[34,49],34],[[29,29]],[[30,30]],[[31,31]],[[32,49]],[[32,32]],[[33,49]],[[33,33]],[[34,49]],[[34,34]],[[29,29],29],[[30,30],30],[[31,31],31],[[35,35],49],[[32,32],49],[[33,33],49],[33,33],[33],[33,33],[35,28],[32,36],[33,37],[34,38],[29,25],[30,24],[31,27],[29,[[39,[49]]]],[30,[[39,[49]]]],[31,[[39,[49]]]],[32,[[39,[49]]]],[33,[[39,[49]]]],[34,[[39,[49]]]],[29,[[39,[49]]]],[30,[[39,[49]]]],[31,[[39,[49]]]],[35,[[39,[49]]]],[32,[[39,[49]]]],[33,[[39,[49]]]],[34,[[39,[49]]]],[32,40],[33,41],[34,42],[32,17],[33,18],[33,19],[34,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[34,34],[[32,32,32],32],[[33,33,33],33],[[34,34,34],34],[[32,49,49],32],[[33,49,49],33],[[34,49,49],34],[[32,49],32],[[33,49],33],[[34,49],34],[[32,49],32],[[33,49],33],[[34,49],34],[48,48],[50,50],[29,29],[30,30],[31,31],[35,35],[32,32],[33,33],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,32],10],[[33,33],11],[[34,34],12],[[32,32],10],[[33,33],11],[[34,34],12],[[32,32],10],[[33,33],11],[[34,34],12],[[32,32],10],[[33,33],11],[[34,34],12],[[32,32],10],[[33,33],11],[[34,34],12],[[32,32],10],[[33,33],11],[[34,34],12],[[29,43],32],[[30,43],33],[[31,43],34],[[29,43],32],[[30,43],33],[[31,43],34],[35,35],[[32,32],32],[[33,33],33],[[34,34],34],[[33,33],33],[[],48],[[],50],[[],29],[[],30],[[],31],[[],35],[[],32],[[],33],[[],34],[48],[50],[48],[50],[2,[[3,[48]]]],[2,[[3,[50]]]],[2,[[3,[29]]]],[2,[[3,[30]]]],[2,[[3,[31]]]],[2,[[3,[35]]]],[2,[[3,[32]]]],[2,[[3,[33]]]],[2,[[3,[34]]]],[29,49],[30,49],[31,49],[[32,32],49],[[33,33],49],[[34,34],49],[[32,32],49],[[33,33],49],[[34,34],49],[[35,49],35],[[32,49],32],[[32,32],32],[[33,49],33],[[33,33],33],[[34,34],34],[[34,49],34],[[32,32]],[[32,49]],[[33,49]],[[33,33]],[[34,34]],[[34,49]],[[32,32],29],[[33,33,33],30],[[34,34,34,34],31],[[35,35],49],[[32,32],49],[[33,33],49],[[34,34],49],[[32,32],32],[[33,33],33],[[34,34],34],[[49,49,49,49],35],[[49,49],32],[[49,49,49],33],[[49,49,49,49],34],[[48,48],4],[[50,50],4],[[29,29],4],[[30,30],4],[[31,31],4],[[35,35],4],[[32,32],4],[[33,33],4],[[34,34],4],[32,32],[33,33],[34,34],[[32,49],33],[[33,49],34],[32,32],[33,33],[34,34],[[48,5],6],[[48,5],6],[[50,5],6],[[50,5],6],[[29,5],6],[[29,5],6],[[30,5],6],[[30,5],6],[[31,5],6],[[31,5],6],[[35,5],6],[[35,5],6],[[32,5],6],[[32,5],6],[[33,5],6],[[33,5],6],[[34,5],6],[[34,5],6],[32,32],[33,33],[34,34],[[]],[[]],[[]],[[]],[48,30],[50,31],[[]],[[]],[[[39,[49]]],32],[[],32],[[]],[[],33],[[[39,[49]]],33],[[]],[[],33],[[],34],[35,34],[[]],[[],34],[[],34],[[],34],[[[39,[49]]],34],[[],34],[50,35],[49,48],[49,29],[49,30],[49,32],[[49,32],48],[[[39,[49]]],35],[[[39,[49]]],32],[[[39,[49]]],33],[[[39,[49]]],34],[[33,49],50],[[33,49],30],[[33,49],31],[[33,49],35],[[32,32,32],48],[[33,33,33,33],50],[[32,32],29],[[33,33,33],30],[[34,34,34,34],31],[[[39,[49]]],48],[[[39,[49]]],50],[[[39,[49]]],29],[[[39,[49]]],30],[[[39,[49]]],31],[[[39,[[39,[49]]]]],48],[[[39,[[39,[49]]]]],50],[[[39,[[39,[49]]]]],29],[[[39,[[39,[49]]]]],30],[[[39,[[39,[49]]]]],31],[[[45,[49]]],48],[[[45,[49]]],50],[[[45,[49]]],29],[[[45,[49]]],30],[[[45,[49]]],31],[32,29],[33,30],[34,31],[[1,49,49,49],30],[[1,49,49,49],31],[[1,49,49,49],35],[29,48],[29,30],[[29,32],48],[30,48],[30,50],[30,29],[30,31],[30,35],[[30,33],50],[31,50],[31,30],[31,35],[35,50],[35,30],[35,31],[[33,33],35],[[32,32],35],[[33,33],35],[[35,33],50],[[35,33],31],[49,50],[49,30],[49,31],[49,35],[49,50],[49,30],[49,31],[49,35],[49,50],[49,30],[49,31],[49,35],[32,48],[33,50],[32,30],[33,31],[[32,49],29],[[32,49,32],48],[[32,49,32],30],[[33,35,33],50],[[33,35,33],31],[33,35],[[[45,[49]]],35],[[[45,[49]]],32],[[[45,[49]]],33],[[[45,[49]]],34],[32,48],[33,50],[32,30],[33,31],[34,35],[[49,49,49,49],35],[[32,43]],[[33,43]],[[34,43]],[[32,43]],[[33,43]],[[34,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,48],[50,50],[29,29],[30,30],[31,31],[35,35],[48,4],[50,4],[29,4],[30,4],[31,4],[35,4],[32,4],[33,4],[34,4],[48,4],[50,4],[29,4],[30,4],[31,4],[35,4],[32,4],[33,4],[34,4],[32,10],[33,11],[34,12],[35,4],[32,15],[33,15],[34,15],[35,4],[32,4],[33,4],[34,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[35,49],[32,49],[33,49],[34,49],[35,49],[32,49],[33,49],[34,49],[35,49],[32,49],[33,49],[34,49],[[35,35,49],35],[[32,32,49],32],[[33,33,49],33],[[34,34,49],34],[[33,33,33],50],[[33,33,33],31],[[33,33,33],50],[[33,33,33],31],[[33,33,33],50],[[33,33,33],31],[[33,33,33],50],[[33,33,33],31],0,0,[[32,32],32],[[33,33],33],[[34,34],34],[32,49],[33,49],[34,49],[[32,32],32],[[33,33],33],[[34,34],34],[32,49],[33,49],[34,49],[[48,48]],[[48,30]],[[50,50]],[[50,31]],[[29,49]],[[29,29]],[[29,32]],[[30,30]],[[30,49]],[[30,33]],[[30,48]],[[31,49]],[[31,31]],[[31,34]],[[31,50]],[[35,49],35],[[35,35],35],[[35,33]],[[32,49],32],[[32,32],32],[[33,33],33],[[33,49],33],[[34,34],34],[[34,49],34],[[32,32,32],32],[[33,33,33],33],[[34,34,34],34],[[29,49]],[[29,29]],[[30,30]],[[30,49]],[[31,31]],[[31,49]],[[35,35]],[[32,32]],[[32,49]],[[33,33]],[[33,49]],[[34,49]],[[34,34]],[[29,29],29],[[30,30],30],[[31,31],31],[[35,35],35],[[29,49],29],[[30,49],30],[[31,49],31],[[29,32],32],[[30,33],33],[[35,33],33],[[31,34],34],[29],[30],[31],[35,35],[32,32],[33,33],[34,34],[[49,49],32],[[49,49,49],33],[[49,49,49,49],34],[35,35],[32,32],[33,33],[34,34],[32,32],[33,33],[34,34],[[49,49,49,49,49,49],31],[[49,49,49,49,49,49],31],[[49,49,49,49,49,49],31],[32,32],[[32,32],49],[[49,49,49],31],[[49,49,49],31],[[49,49,49],31],[[49,49,49],31],[[49,49,49,49],31],[[49,49,49,49],31],[[49,49,49,49],31],[[32,49],32],[[33,49],33],[[34,49],34],[46,48],[46,50],[46,29],[46,29],[46,30],[46,30],[46,31],[46,31],[46,35],[46,35],[46,32],[46,32],[46,33],[46,33],[46,34],[46,34],[[32,32],32],[[33,33],33],[[34,34],34],[[32,32],32],[[33,33],33],[[34,34],34],[[31,33],33],[32,32],[33,33],[34,34],[[32,32],32],[[33,33],33],[[34,34],34],[[32,32],32],[[33,33],33],[[34,34],34],[[32,49],32],[[32,32],32],[[33,33],33],[[33,49],33],[[34,49],34],[[34,34],34],[[32,49]],[[32,32]],[[33,33]],[[33,49]],[[34,34]],[[34,49]],[[32,32],32],[32,32],[33,33],[34,34],[[29,43],32],[[30,43],33],[[31,43],34],[[10,32,32],32],[[11,33,33],33],[[12,34,34],34],[[48,8],3],[[50,8],3],[[29,8],3],[[30,8],3],[[31,8],3],[[35,8],3],[[32,8],3],[[33,8],3],[[34,8],3],[32,32],[33,33],[34,34],[[35,35,49],35],[49,32],[49,33],[49,34],[[29,29]],[[30,30]],[[31,31]],[[35,35],35],[[32,49],32],[[32,32],32],[[33,49],33],[[33,33],33],[[34,34],34],[[34,49],34],[[29,29]],[[30,30]],[[31,31]],[[32,49]],[[32,32]],[[33,33]],[[33,49]],[[34,49]],[[34,34]],[[29,29],29],[[30,30],30],[[31,31],31],[46,29],[46,29],[46,30],[46,30],[46,31],[46,31],[46,35],[46,35],[46,32],[46,32],[46,33],[46,33],[46,34],[46,34],[35,[[39,[49]]]],[32,[[39,[49]]]],[33,[[39,[49]]]],[34,[[39,[49]]]],[35],[48,[[39,[49]]]],[50,[[39,[49]]]],[29,[[39,[49]]]],[30,[[39,[49]]]],[31,[[39,[49]]]],[48,[[39,[[39,[49]]]]]],[50,[[39,[[39,[49]]]]]],[29,[[39,[[39,[49]]]]]],[30,[[39,[[39,[49]]]]]],[31,[[39,[[39,[49]]]]]],[[35,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50],[31],[35,33],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[48,32],32],[[30,32],32],[[50,33],33],[[31,33],33],[[48,32],32],[[30,32],32],[[50,33],33],[[31,33],33],0,0,[29,29],[30,30],[31,31],[33,32],[34,33],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[32,[[47,[32]]]],[33,[[47,[33]]]],[34,[[47,[34]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[48,[45,[49]]]],[[50,[45,[49]]]],[[29,[45,[49]]]],[[30,[45,[49]]]],[[31,[45,[49]]]],[[35,[45,[49]]]],[[32,[45,[49]]]],[[33,[45,[49]]]],[[34,[45,[49]]]],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],0,0,0,0,0,0,0,[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[35,33],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],0,0,0,0,0,0,0,[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[32,32],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[32,33],[33,33],[34,33],[34,34],[32,34],[33,34],[34,34],[32,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],0,0,0,0,0,[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[34,33],[34,34],[34,34],[34,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,32],[34,32],[34,33],[34,34],[34,34],[34,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],[33,33],[34,33],[34,34],[33,34],[34,34],[33,34],[34,34],[33,34],[34,34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,36],[37,37],[38,38],[[36,51],36],[[36,36],36],[[37,37],37],[[37,51],37],[[38,51],38],[[38,38],38],[[36,36]],[[36,51]],[[37,51]],[[37,37]],[[38,38]],[[38,51]],[36,32],[37,33],[38,34],[36,[[39,[51]]]],[37,[[39,[51]]]],[38,[[39,[51]]]],[36,[[39,[51]]]],[37,[[39,[51]]]],[38,[[39,[51]]]],[36,40],[37,41],[38,42],[36,17],[37,18],[37,19],[38,20],[[36,51]],[[36,36]],[[37,37]],[[37,51]],[[38,38]],[[38,51]],[[36,36]],[[36,51]],[[37,51]],[[37,37]],[[38,51]],[[38,38]],[[36,36]],[[36,51]],[[37,37]],[[37,51]],[[38,51]],[[38,38]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36,36],36],[[37,37,37],37],[[38,38,38],38],[36,36],[37,37],[38,38],[[]],[[]],[[]],[[36,36],10],[[37,37],11],[[38,38],12],[[36,36],10],[[37,37],11],[[38,38],12],[[36,36],10],[[37,37],11],[[38,38],12],[[36,36],10],[[37,37],11],[[38,38],12],[[36,36],10],[[37,37],11],[[38,38],12],[[36,36],10],[[37,37],11],[[38,38],12],[[36,36],36],[[37,37],37],[[38,38],38],[[37,37],37],[[],36],[[],37],[[],38],[2,[[3,[36]]]],[2,[[3,[37]]]],[2,[[3,[38]]]],[[36,51],36],[[36,36],36],[[37,51],37],[[37,37],37],[[38,38],38],[[38,51],38],[[36,51]],[[36,36]],[[37,51]],[[37,37]],[[38,51]],[[38,38]],[[36,36],51],[[37,37],51],[[38,38],51],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],4],[[37,37],4],[[38,38],4],[[],4],[[],4],[[],4],[[36,51],37],[[37,51],38],[[36,5],6],[[36,5],6],[[37,5],6],[[37,5],6],[[38,5],6],[[38,5],6],[[]],[[[39,[51]]],36],[[],36],[[[39,[51]]],37],[[],37],[[]],[[],37],[[]],[[],38],[[],38],[[],38],[[[39,[51]]],38],[[],38],[[],38],[[[39,[51]]],36],[[[39,[51]]],37],[[[39,[51]]],38],[[[45,[51]]],36],[[[45,[51]]],37],[[[45,[51]]],38],[[36,7]],[[37,7]],[[38,7]],[[36,43]],[[37,43]],[[38,43]],[[36,43]],[[37,43]],[[38,43]],[[]],[[]],[[]],[36,15],[37,15],[38,15],[[],4],[[],4],[[],4],[[51,51],36],[[51,51,51],37],[[51,51,51,51],38],[[36,36],36],[[37,37],37],[[38,38],38],[36,51],[37,51],[38,51],[[36,36],36],[[37,37],37],[[38,38],38],[36,51],[37,51],[38,51],[[36,36],36],[[36,51],36],[[37,51],37],[[37,37],37],[[38,38],38],[[38,51],38],[[36,51]],[[36,36]],[[37,51]],[[37,37]],[[38,51]],[[38,38]],[36,36],[37,37],[38,38],[[51,51],36],[[51,51,51],37],[[51,51,51,51],38],[36],[37],[38],[36,36],[[36,36],51],[46,36],[46,36],[46,37],[46,37],[46,38],[46,38],[[36,51],36],[[36,36],36],[[37,37],37],[[37,51],37],[[38,51],38],[[38,38],38],[[36,36]],[[36,51]],[[37,51]],[[37,37]],[[38,38]],[[38,51]],[[36,36],36],[[10,36,36],36],[[11,37,37],37],[[12,38,38],38],[[36,8],3],[[37,8],3],[[38,8],3],[[36,40]],[[36,52]],[[36,15]],[[36,53]],[[36,54]],[[36,51]],[[36,36]],[[36,55]],[[37,53]],[[37,37]],[[37,54]],[[37,15]],[[37,51]],[[37,52]],[[37,41]],[[37,55]],[[38,54]],[[38,52]],[[38,38]],[[38,15]],[[38,55]],[[38,42]],[[38,53]],[[38,51]],[[36,51]],[[36,40]],[[36,55]],[[36,53]],[[36,15]],[[36,54]],[[36,36]],[[36,52]],[[37,41]],[[37,37]],[[37,15]],[[37,51]],[[37,52]],[[37,54]],[[37,55]],[[37,53]],[[38,38]],[[38,51]],[[38,53]],[[38,55]],[[38,15]],[[38,42]],[[38,54]],[[38,52]],[36,36],[37,37],[38,38],[51,36],[51,37],[51,38],[[36,36],36],[[36,51],36],[[37,51],37],[[37,37],37],[[38,38],38],[[38,51],38],[[36,51]],[[36,36]],[[37,51]],[[37,37]],[[38,51]],[[38,38]],[46,36],[46,36],[46,37],[46,37],[46,38],[46,38],[36,[[39,[51]]]],[37,[[39,[51]]]],[38,[[39,[51]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[37,36],[38,37],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],0,[[36,[45,[51]]]],[[37,[45,[51]]]],[[38,[45,[51]]]],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],0,0,0,[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],0,0,0,[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[36,36],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[36,37],[37,37],[38,37],[38,38],[36,38],[37,38],[38,38],[36,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],0,0,[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[38,37],[38,38],[38,38],[38,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,36],[38,36],[38,37],[38,38],[38,38],[38,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],[37,37],[38,37],[38,38],[37,38],[38,38],[37,38],[38,38],[37,38],[38,38],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[40,40],40],[[40,15],40],[[41,41],41],[[41,15],41],[[42,15],42],[[42,42],42],[[40,40]],[[40,15]],[[41,15]],[[41,41]],[[42,42]],[[42,15]],[40,32],[41,33],[42,34],[40,36],[41,37],[42,38],[40,[[39,[15]]]],[41,[[39,[15]]]],[42,[[39,[15]]]],[40,[[39,[15]]]],[41,[[39,[15]]]],[42,[[39,[15]]]],[40,17],[41,18],[41,19],[42,20],[[40,40]],[[40,15]],[[41,15]],[[41,41]],[[42,15]],[[42,42]],[[40,40]],[[40,15]],[[41,15]],[[41,41]],[[42,15]],[[42,42]],[[40,40]],[[40,15]],[[41,15]],[[41,41]],[[42,42]],[[42,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[40,40,40],40],[[41,41,41],41],[[42,42,42],42],[40,40],[41,41],[42,42],[[]],[[]],[[]],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[40,40],10],[[41,41],11],[[42,42],12],[[41,41],41],[[],40],[[],41],[[],42],[2,[[3,[40]]]],[2,[[3,[41]]]],[2,[[3,[42]]]],[[40,40],40],[[40,15],40],[[41,41],41],[[41,15],41],[[42,15],42],[[42,42],42],[[40,40]],[[40,15]],[[41,15]],[[41,41]],[[42,15]],[[42,42]],[[40,40],15],[[41,41],15],[[42,42],15],[[40,40],40],[[41,41],41],[[42,42],42],[[40,40],4],[[41,41],4],[[42,42],4],[[],4],[[],4],[[],4],[[40,15],41],[[41,15],42],[[40,5],6],[[40,5],6],[[41,5],6],[[41,5],6],[[42,5],6],[[42,5],6],[[],40],[[]],[[[39,[15]]],40],[[],41],[[[39,[15]]],41],[[],41],[[]],[[]],[[[39,[15]]],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[[39,[15]]],40],[[[39,[15]]],41],[[[39,[15]]],42],[[[45,[15]]],40],[[[45,[15]]],41],[[[45,[15]]],42],[[40,7]],[[41,7]],[[42,7]],[[40,43]],[[41,43]],[[42,43]],[[40,43]],[[41,43]],[[42,43]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[40,40],40],[[41,41],41],[[42,42],42],[40,15],[41,15],[42,15],[[40,40],40],[[41,41],41],[[42,42],42],[40,15],[41,15],[42,15],[[40,15],40],[[40,40],40],[[41,41],41],[[41,15],41],[[42,15],42],[[42,42],42],[[40,15]],[[40,40]],[[41,15]],[[41,41]],[[42,42]],[[42,15]],[[15,15],40],[[15,15,15],41],[[15,15,15,15],42],[40],[41],[42],[46,40],[46,40],[46,41],[46,41],[46,42],[46,42],[[40,40],40],[[40,15],40],[[41,41],41],[[41,15],41],[[42,42],42],[[42,15],42],[[40,40]],[[40,15]],[[41,15]],[[41,41]],[[42,15]],[[42,42]],[[10,40,40],40],[[11,41,41],41],[[12,42,42],42],[[40,8],3],[[41,8],3],[[42,8],3],[[40,15]],[[40,36]],[[40,53]],[[40,51]],[[40,55]],[[40,40]],[[40,52]],[[40,54]],[[41,54]],[[41,53]],[[41,51]],[[41,55]],[[41,41]],[[41,37]],[[41,15]],[[41,52]],[[42,15]],[[42,53]],[[42,52]],[[42,51]],[[42,55]],[[42,54]],[[42,38]],[[42,42]],[[40,53]],[[40,55]],[[40,51]],[[40,36]],[[40,15]],[[40,52]],[[40,40]],[[40,54]],[[41,37]],[[41,41]],[[41,53]],[[41,52]],[[41,54]],[[41,15]],[[41,51]],[[41,55]],[[42,55]],[[42,54]],[[42,42]],[[42,52]],[[42,38]],[[42,15]],[[42,53]],[[42,51]],[15,40],[15,41],[15,42],[[40,15],40],[[40,40],40],[[41,41],41],[[41,15],41],[[42,15],42],[[42,42],42],[[40,15]],[[40,40]],[[41,41]],[[41,15]],[[42,15]],[[42,42]],[46,40],[46,40],[46,41],[46,41],[46,42],[46,42],[40,[[39,[15]]]],[41,[[39,[15]]]],[42,[[39,[15]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[41,40],[42,41],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[15,15],40],[[15,15,15],41],[[15,15,15,15],42],0,[[40,[45,[15]]]],[[41,[45,[15]]]],[[42,[45,[15]]]],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],0,0,0,[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],0,0,0,[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[40,40],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[40,41],[41,41],[42,41],[42,42],[40,42],[41,42],[42,42],[40,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],0,0,[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[42,41],[42,42],[42,42],[42,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,40],[42,40],[42,41],[42,42],[42,42],[42,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42],[41,41],[42,41],[42,42],[41,42],[42,42],[41,42],[42,42],[41,42],[42,42]],"c":[],"p":[[4,"EulerRot"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[8,"Serializer"],[3,"TypeId"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[3,"BVec3A"],[3,"BVec4A"],[15,"u32"],[3,"String"],[3,"Vec2"],[3,"Vec3"],[3,"Vec3A"],[3,"Vec4"],[3,"Affine2"],[15,"f32"],[3,"Affine3A"],[3,"Mat3"],[3,"Mat2"],[3,"Mat3A"],[3,"Mat4"],[3,"Quat"],[3,"DMat2"],[3,"DMat3"],[3,"DMat4"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DQuat"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[15,"array"],[3,"UVec2"],[3,"UVec3"],[3,"UVec4"],[15,"usize"],[3,"__m128"],[15,"slice"],[8,"Iterator"],[4,"Option"],[3,"DAffine2"],[15,"f64"],[3,"DAffine3"],[15,"i32"],[15,"i16"],[15,"u8"],[15,"i8"],[15,"u16"],[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"]],"a":{"cross":[966,2433,3377],"determinant":[966,2433,3377],"magnitude":[818,819,820,821,822,2323,2324,2325,2326],"magnitude2":[828,829,830,831,832,2331,2332,2333,2334],"mix":[833,834,835,836,837,2335,2336,2337,2338],"scale":[675,676,677,678,2208,2209,2210],"wedge":[966,2433,3377]}},\
"kolor":{"doc":"kolor implements conversions between color spaces which …","t":"SDDDGSDSSSSSSSDSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAANNNENNLLFLLFLLLNNNNNNNNNNNNNNNNNNNNDDNNNNNNSSSNNNNNNNNNNNNNNNNNEEELLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLNLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFDDMMMMMMFFFFFFFFFFFFDAFFFFFFFFFFFLLLFFLLLAALLAFFLLLLFFFFFFFFFFFFFFFFFFFRRRRRRRRRRRRRRRRRRRRRRRR","n":["AXES","Color","ColorConversion","ColorSpace","FType","IDENTITY","Mat3","NAN","NAN","NEG_ONE","NEG_X","NEG_Y","NEG_Z","ONE","Vec3","X","Y","Z","ZERO","ZERO","abs","abs_diff_eq","abs_diff_eq","add","add","add","add_assign","add_assign","add_assign","add_mat3","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_dmat3","as_dvec3","as_ivec3","as_mut","as_mut","as_ref","as_ref","as_uvec3","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clamp","clamp_length","clamp_length_max","clamp_length_min","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpge","cmpgt","cmple","cmplt","cmpne","col","col_mut","copysign","cross","default","default","deserialize","deserialize","deserialize","deserialize","details","determinant","distance","distance_squared","div","div","div_assign","div_assign","dot","dot_into_vec","eq","eq","eq","eq","equivalent","exp","extend","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_array","from_axis_angle","from_cols","from_cols_array","from_cols_array_2d","from_cols_slice","from_diagonal","from_euler","from_mat2","from_mat4","from_quat","from_rotation_x","from_rotation_y","from_rotation_z","from_scale","from_scale_angle_translation","from_slice","from_translation","hash","index","index_mut","into","into","into","into","into","inverse","is_finite","is_finite","is_nan","is_nan","is_nan_mask","is_negative_bitmask","is_normalized","is_valid_bit_pattern","is_valid_bit_pattern","length","length_recip","length_squared","lerp","max","max_element","min","min_element","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat3","mul_scalar","mul_vec3","mul_vec3a","neg","neg","new","normalize","normalize_or_zero","powf","product","product","product","product","project_onto","project_onto_normalized","recip","reject_from","reject_from_normalized","rem","rem","rem_assign","rem_assign","round","row","select","serialize","serialize","serialize","serialize","signum","space","spaces","splat","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_mat3","sum","sum","sum","sum","to_array","to_cols_array","to_cols_array_2d","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transform_point2","transform_vector2","transpose","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_normalize","type_id","type_id","type_id","type_id","type_id","value","write_cols_to_slice","write_to_slice","x","x_axis","xx","xxx","xxxx","xxxy","xxxz","xxy","xxyx","xxyy","xxyz","xxz","xxzx","xxzy","xxzz","xy","xyx","xyxx","xyxy","xyxz","xyy","xyyx","xyyy","xyyz","xyz","xyzx","xyzy","xyzz","xz","xzx","xzxx","xzxy","xzxz","xzy","xzyx","xzyy","xzyz","xzz","xzzx","xzzy","xzzz","y","y_axis","yx","yxx","yxxx","yxxy","yxxz","yxy","yxyx","yxyy","yxyz","yxz","yxzx","yxzy","yxzz","yy","yyx","yyxx","yyxy","yyxz","yyy","yyyx","yyyy","yyyz","yyz","yyzx","yyzy","yyzz","yz","yzx","yzxx","yzxy","yzxz","yzy","yzyx","yzyy","yzyz","yzz","yzzx","yzzy","yzzz","z","z_axis","zx","zxx","zxxx","zxxy","zxxz","zxy","zxyx","zxyy","zxyz","zxz","zxzx","zxzy","zxzz","zy","zyx","zyxx","zyxy","zyxz","zyy","zyyx","zyyy","zyyz","zyz","zyzx","zyzy","zyzz","zz","zzx","zzxx","zzxy","zzxz","zzy","zzyx","zzyy","zzyz","zzz","zzzx","zzzy","zzzz","cat","color","conversion","generated_matrices","math","transform","xyz","Bradford","Cat02","CmcCat2000","LMSConeSpace","Sharp","VonKries","borrow","borrow_mut","chromatic_adaptation_transform","from","into","lms_cone_space_matrix","try_from","try_into","type_id","A","ADOBE_1998","ADOBE_WIDE","AP0","AP1","APPLE","B","BT_2020","BT_601","BT_709","C","CIELAB","CIELCh","CIE_1960_UCS","CIE_1960_UCS_uvV","CIE_1964_UVW","CIE_1976_Luv","CIE_RGB","CIE_XYZ","CIE_xyY","Color","ColorSpace","D50","D55","D60","D65","D75","E","ENUM_COUNT","ENUM_COUNT","ENUM_COUNT","F11","F2","F7","HSI","HSL","HSV","ICtCp_HLG","ICtCp_PQ","NONE","NONE","NONE","Oklab","Oklch","P3","P3_DCI","PQ","PRO_PHOTO","RGBPrimaries","TransformFn","WhitePoint","as_linear","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_spaces","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","is_linear","new","new","primaries","sRGB","serialize","serialize","serialize","space","space","srgb","to","to_cie_xyY","to_cielab","to_cielch","to_linear","to_owned","to_owned","to_owned","transform_function","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","values","values","white_point","with_primaries","with_transform","with_whitepoint","ACES2065_1","ACES_CG","ADOBE_1998","ADOBE_WIDE","ALL_COLOR_SPACES","APPLE","BT_2020","BT_709","CIE_RGB","CIE_XYZ","DISPLAY_P3","ENCODED_BT_2020","ENCODED_BT_2100_PQ","ENCODED_BT_709","ENCODED_DISPLAY_P3","ENCODED_SRGB","ICtCp_HLG","ICtCp_PQ","LINEAR_SRGB","OKLAB","OKLCH","P3_D60","P3_THEATER","PRO_PHOTO","ColorConversion","LinearColorConversion","apply_dst_transform","apply_linear_part","apply_src_transform","borrow","borrow_mut","clone","clone_into","convert","convert","convert_float","deserialize","dst_space","dst_transform","dst_transform_fn","eq","fmt","from","input_space","into","invert","is_linear","linear_part","matrix","new","new","output_space","serialize","src_space","src_transform","src_transform_fn","to_owned","try_from","try_into","type_id","ADOBE_1998_D65_TO_ADOBE_WIDE_D50","ADOBE_1998_D65_TO_AP0_D60","ADOBE_1998_D65_TO_AP1_D60","ADOBE_1998_D65_TO_APPLE_D65","ADOBE_1998_D65_TO_BT_2020_D65","ADOBE_1998_D65_TO_BT_709_D65","ADOBE_1998_D65_TO_CIE_RGB_E","ADOBE_1998_D65_TO_CIE_XYZ_D65","ADOBE_1998_D65_TO_P3_D60","ADOBE_1998_D65_TO_P3_D65","ADOBE_1998_D65_TO_P3_P3_DCI","ADOBE_1998_D65_TO_PRO_PHOTO_D50","ADOBE_WIDE_D50_TO_ADOBE_1998_D65","ADOBE_WIDE_D50_TO_AP0_D60","ADOBE_WIDE_D50_TO_AP1_D60","ADOBE_WIDE_D50_TO_APPLE_D65","ADOBE_WIDE_D50_TO_BT_2020_D65","ADOBE_WIDE_D50_TO_BT_709_D65","ADOBE_WIDE_D50_TO_CIE_RGB_E","ADOBE_WIDE_D50_TO_CIE_XYZ_D65","ADOBE_WIDE_D50_TO_P3_D60","ADOBE_WIDE_D50_TO_P3_D65","ADOBE_WIDE_D50_TO_P3_P3_DCI","ADOBE_WIDE_D50_TO_PRO_PHOTO_D50","AP0_D60_TO_ADOBE_1998_D65","AP0_D60_TO_ADOBE_WIDE_D50","AP0_D60_TO_AP1_D60","AP0_D60_TO_APPLE_D65","AP0_D60_TO_BT_2020_D65","AP0_D60_TO_BT_709_D65","AP0_D60_TO_CIE_RGB_E","AP0_D60_TO_CIE_XYZ_D65","AP0_D60_TO_P3_D60","AP0_D60_TO_P3_D65","AP0_D60_TO_P3_P3_DCI","AP0_D60_TO_PRO_PHOTO_D50","AP1_D60_TO_ADOBE_1998_D65","AP1_D60_TO_ADOBE_WIDE_D50","AP1_D60_TO_AP0_D60","AP1_D60_TO_APPLE_D65","AP1_D60_TO_BT_2020_D65","AP1_D60_TO_BT_709_D65","AP1_D60_TO_CIE_RGB_E","AP1_D60_TO_CIE_XYZ_D65","AP1_D60_TO_P3_D60","AP1_D60_TO_P3_D65","AP1_D60_TO_P3_P3_DCI","AP1_D60_TO_PRO_PHOTO_D50","APPLE_D65_TO_ADOBE_1998_D65","APPLE_D65_TO_ADOBE_WIDE_D50","APPLE_D65_TO_AP0_D60","APPLE_D65_TO_AP1_D60","APPLE_D65_TO_BT_2020_D65","APPLE_D65_TO_BT_709_D65","APPLE_D65_TO_CIE_RGB_E","APPLE_D65_TO_CIE_XYZ_D65","APPLE_D65_TO_P3_D60","APPLE_D65_TO_P3_D65","APPLE_D65_TO_P3_P3_DCI","APPLE_D65_TO_PRO_PHOTO_D50","BT_2020_D65_TO_ADOBE_1998_D65","BT_2020_D65_TO_ADOBE_WIDE_D50","BT_2020_D65_TO_AP0_D60","BT_2020_D65_TO_AP1_D60","BT_2020_D65_TO_APPLE_D65","BT_2020_D65_TO_BT_709_D65","BT_2020_D65_TO_CIE_RGB_E","BT_2020_D65_TO_CIE_XYZ_D65","BT_2020_D65_TO_P3_D60","BT_2020_D65_TO_P3_D65","BT_2020_D65_TO_P3_P3_DCI","BT_2020_D65_TO_PRO_PHOTO_D50","BT_709_D65_TO_ADOBE_1998_D65","BT_709_D65_TO_ADOBE_WIDE_D50","BT_709_D65_TO_AP0_D60","BT_709_D65_TO_AP1_D60","BT_709_D65_TO_APPLE_D65","BT_709_D65_TO_BT_2020_D65","BT_709_D65_TO_CIE_RGB_E","BT_709_D65_TO_CIE_XYZ_D65","BT_709_D65_TO_P3_D60","BT_709_D65_TO_P3_D65","BT_709_D65_TO_P3_P3_DCI","BT_709_D65_TO_PRO_PHOTO_D50","CIE_RGB_E_TO_ADOBE_1998_D65","CIE_RGB_E_TO_ADOBE_WIDE_D50","CIE_RGB_E_TO_AP0_D60","CIE_RGB_E_TO_AP1_D60","CIE_RGB_E_TO_APPLE_D65","CIE_RGB_E_TO_BT_2020_D65","CIE_RGB_E_TO_BT_709_D65","CIE_RGB_E_TO_CIE_XYZ_D65","CIE_RGB_E_TO_P3_D60","CIE_RGB_E_TO_P3_D65","CIE_RGB_E_TO_P3_P3_DCI","CIE_RGB_E_TO_PRO_PHOTO_D50","CIE_XYZ_D65_TO_ADOBE_1998_D65","CIE_XYZ_D65_TO_ADOBE_WIDE_D50","CIE_XYZ_D65_TO_AP0_D60","CIE_XYZ_D65_TO_AP1_D60","CIE_XYZ_D65_TO_APPLE_D65","CIE_XYZ_D65_TO_BT_2020_D65","CIE_XYZ_D65_TO_BT_709_D65","CIE_XYZ_D65_TO_CIE_RGB_E","CIE_XYZ_D65_TO_P3_D60","CIE_XYZ_D65_TO_P3_D65","CIE_XYZ_D65_TO_P3_P3_DCI","CIE_XYZ_D65_TO_PRO_PHOTO_D50","P3_D60_TO_ADOBE_1998_D65","P3_D60_TO_ADOBE_WIDE_D50","P3_D60_TO_AP0_D60","P3_D60_TO_AP1_D60","P3_D60_TO_APPLE_D65","P3_D60_TO_BT_2020_D65","P3_D60_TO_BT_709_D65","P3_D60_TO_CIE_RGB_E","P3_D60_TO_CIE_XYZ_D65","P3_D60_TO_P3_D65","P3_D60_TO_P3_P3_DCI","P3_D60_TO_PRO_PHOTO_D50","P3_D65_TO_ADOBE_1998_D65","P3_D65_TO_ADOBE_WIDE_D50","P3_D65_TO_AP0_D60","P3_D65_TO_AP1_D60","P3_D65_TO_APPLE_D65","P3_D65_TO_BT_2020_D65","P3_D65_TO_BT_709_D65","P3_D65_TO_CIE_RGB_E","P3_D65_TO_CIE_XYZ_D65","P3_D65_TO_P3_D60","P3_D65_TO_P3_P3_DCI","P3_D65_TO_PRO_PHOTO_D50","P3_P3_DCI_TO_ADOBE_1998_D65","P3_P3_DCI_TO_ADOBE_WIDE_D50","P3_P3_DCI_TO_AP0_D60","P3_P3_DCI_TO_AP1_D60","P3_P3_DCI_TO_APPLE_D65","P3_P3_DCI_TO_BT_2020_D65","P3_P3_DCI_TO_BT_709_D65","P3_P3_DCI_TO_CIE_RGB_E","P3_P3_DCI_TO_CIE_XYZ_D65","P3_P3_DCI_TO_P3_D60","P3_P3_DCI_TO_P3_D65","P3_P3_DCI_TO_PRO_PHOTO_D50","PRO_PHOTO_D50_TO_ADOBE_1998_D65","PRO_PHOTO_D50_TO_ADOBE_WIDE_D50","PRO_PHOTO_D50_TO_AP0_D60","PRO_PHOTO_D50_TO_AP1_D60","PRO_PHOTO_D50_TO_APPLE_D65","PRO_PHOTO_D50_TO_BT_2020_D65","PRO_PHOTO_D50_TO_BT_709_D65","PRO_PHOTO_D50_TO_CIE_RGB_E","PRO_PHOTO_D50_TO_CIE_XYZ_D65","PRO_PHOTO_D50_TO_P3_D60","PRO_PHOTO_D50_TO_P3_D65","PRO_PHOTO_D50_TO_P3_P3_DCI","const_conversion_matrix","Mat3","Vec3","x","x_axis","y","y_axis","z","z_axis","CIELAB_to_CIELCh","CIELAB_to_XYZ","CIELCh_to_CIELAB","CIELCh_to_XYZ","CIE_1960_UCS_to_XYZ","CIE_1960_UCS_to_uvV","CIE_1960_UCS_uvV_to_XYZ","CIE_1960_uvV_to_UCS","CIE_1960_uvV_to_xyV","CIE_1960_xyV_to_uvV","CIE_1964_UVW_to_XYZ","CIE_1976_Luv_to_XYZ","ColorTransform","ICtCp","Oklab_to_XYZ","Oklch_to_XYZ","XYZ_to_CIELAB","XYZ_to_CIELCh","XYZ_to_CIE_1960_UCS","XYZ_to_CIE_1960_UCS_uvV","XYZ_to_CIE_1964_UVW","XYZ_to_CIE_1976_Luv","XYZ_to_Oklab","XYZ_to_Oklch","XYZ_to_xyY","apply","borrow","borrow_mut","bt601_oetf","bt601_oetf_inverse","clone","clone_into","from","hlg","hsx","into","new","pq","sRGB_eotf","sRGB_oetf","to_owned","try_from","try_into","type_id","xyY_to_XYZ","ICtCp_HLG_to_RGB","ICtCp_PQ_to_RGB","RGB_to_ICtCp_HLG","RGB_to_ICtCp_PQ","ARIB_HLG_oetf","ARIB_HLG_oetf_inverse","HSI_to_RGB","HSL_to_RGB","HSV_to_RGB","RGB_to_HSI","RGB_to_HSL","RGB_to_HSV","ST_2084_PQ_eotf","ST_2084_PQ_eotf_float","ST_2084_PQ_eotf_inverse","ST_2084_PQ_eotf_inverse_float","rgb_to_xyz","xyz_to_rgb","ACES2065_1","ACES_CG","ADOBE_1998","ADOBE_WIDE","ALL_COLOR_SPACES","APPLE","BT_2020","BT_709","CIE_RGB","CIE_XYZ","DISPLAY_P3","ENCODED_BT_2020","ENCODED_BT_2100_PQ","ENCODED_BT_709","ENCODED_DISPLAY_P3","ENCODED_SRGB","ICtCp_HLG","ICtCp_PQ","LINEAR_SRGB","OKLAB","OKLCH","P3_D60","P3_THEATER","PRO_PHOTO"],"q":[[0,"kolor"],[378,"kolor::details"],[385,"kolor::details::cat"],[400,"kolor::details::color"],[522,"kolor::details::color::color_spaces"],[546,"kolor::details::conversion"],[582,"kolor::details::generated_matrices"],[739,"kolor::details::math"],[747,"kolor::details::transform"],[792,"kolor::details::transform::ICtCp"],[796,"kolor::details::transform::hlg"],[798,"kolor::details::transform::hsx"],[804,"kolor::details::transform::pq"],[808,"kolor::details::xyz"],[810,"kolor::spaces"]],"d":["The unit axes.","Color is a 3-component vector defined in a ColorSpace.","ColorConversion defines an operation that maps a …","A color space defined in data by its Primaries, white point…","","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 column major matrix.","All NAN:s.","All NAN.","All negative ones.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","All ones.","A 3-dimensional vector.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","Adds two 3x3 matrices.","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a vector with signs of <code>rhs</code> and the magnitudes of …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","","","","","","","","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Creates an affine transformation matrix from the given 2D …","Creates a new vector from an array.","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3x3 matrix from two column vectors.","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates an affine transformation matrix from the given 2x2 …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given 2D …","Creates a vector from the first 3 values in <code>slice</code>.","Creates an affine transformation matrix from the given 2D …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inverse of <code>self</code>.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns whether <code>self</code> is length <code>1.0</code> or not.","","","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","Multiplies two 3x3 matrices.","Multiplies a 3x3 matrix by a scalar.","Transforms a 3D vector.","Transforms a <code>Vec3A</code>.","","","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns a vector containing each element of <code>self</code> raised to …","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","Returns a vector with elements representing the sign of …","","","Creates a vector with all elements set to <code>v</code>.","","","","","","","Subtracts two 3x3 matrices.","","","","","<code>[x, y, z]</code>","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","","","","","","","","Transforms the given 2D vector as a point.","Rotates the given 2D vector.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the elements of <code>self</code> to the first 3 elements in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements Chromatic Adaptation Transformation (CAT).","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Incandescent/tungsten","","","","","","Old direct sunlight at noon","","The BT.601/BT.709/BT.2020 (they are equivalent) OETF and …","BT.709 is the sRGB primaries.","Old daylight","CIELAB transform","CIELCh transform","CIE 1960 UCS transform","CIE 1960 UCS transform in uvV form","CIE 1964 UVW transform","CIE 1976 Luv transform","","The reference XYZ color space","CIE xyY transform","Color is a 3-component vector defined in a ColorSpace.","A color space defined in data by its Primaries, white point…","ICC profile PCS","Mid-morning daylight","","Daylight, sRGB, Adobe-RGB","North sky daylight","Equal energy","","","","Ultralume 40, Philips TL84","Cool fluorescent","Daylight fluorescent, D65 simulator","(Hue, Saturation, Intensity), where I is defined as the …","(Hue, Saturation, Lightness), where L is defined as the …","(Hue, Saturation, Value), where V is defined as the …","BT.2100 ICtCp with HLG transfer function","BT.2100 ICtCp with PQ transfer function","","","","Oklab conversion from xyz","Oklch (Oklab’s LCh variant) conversion from xyz","P3 is the primaries for DCI-P3 and the variations with …","P3-DCI white point, sort of greenish","SMPTE ST 2084:2014 aka “Perceptual Quantizer” transfer …","","RGBPrimaries is a set of primary colors picked to define …","A TransformFn identifies an invertible mapping of colors …","A WhitePoint defines the color “white” in an RGB color …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the color space has a non-linear transform applied","","","","The sRGB transfer functions (aka “gamma correction”)","","","","","","Equivalent to …","Returns a Color with this color converted into the …","Creates a CIE uvV color space using this space’s white …","Creates a CIE LAB color space using this space’s white …","Creates a CIE LCh color space using this space’s white …","","","","","","","","","","","","","","","","","","","Creates a new color space with the primaries and transform …","Creates a new color space with the primaries and white …","Creates a new color space with the transform function and …","ACES2065-1 is a linear encoding in AP0 primaries with a …","ACEScg is a linear encoding in AP1 primaries with a D60 …","Adobe RGB (1998) is a linear encoding in Adobe 1998 …","Adobe Wide Gamut RGB is a linear encoding in Adobe Wide …","Array containing all built-in color spaces.","Apple RGB is a linear encoding in Apple primaries with a …","BT.2020 is a linear encoding in BT.2020 primaries with a …","BT.709 is a linear encoding in BT.709 primaries with a D65 …","CIE RGB is the original RGB space, defined in CIE RGB …","CIE XYZ reference color space. Uses CIE XYZ primaries with …","Display P3 by Apple is a linear encoding in P3 primaries …","Encoded BT.2020 is BT.2020 with the BT.2020 OETF applied.","Encoded BT.2100 PQ is BT.2020 (equivalent to the linear …","Encoded BT.709 is BT.709 with the BT.709 OETF applied.","Encoded Display P3 is Display P3 with the sRGB OETF …","Encoded sRGB is Linear sRGB with the sRGB OETF applied …","ICtCp_HLG is a non-linear encoding in BT.2020 primaries, …","ICtCp_PQ is a non-linear encoding in BT.2020 primaries, …","Linear sRGB is a linear encoding in BT.709 primaries with …","Oklab is a non-linear, perceptual encoding in XYZ, with a …","Oklch is a non-linear, perceptual encoding in XYZ, with a …","P3-D60 (ACES Cinema) is a linear encoding in P3 primaries …","P3-DCI (Theater) is a linear encoding in P3 primaries with …","Pro Photo RGB is a linear encoding in Pro Photo primaries …","ColorConversion defines an operation that maps a …","A transformation from one linear color space to another.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codex3 column major matrix.","A 3-dimensional vector.","","","","","","","","","","","","","","","","","","","ColorTransform represents a reference to a function that …","BT.2100 ICtCp","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","ARIB STD-B67 or “Hybrid Log-Gamma” used in BT.2100","transforms for Hue/Saturation/X color models, like HSL, …","Calls <code>U::from(self)</code>.","","SMPTE ST 2084:2014 EOTF aka “Perceptual Quantizer” …","Applies the sRGB EOTF (electro-optical transfer function), …","Applies the sRGB OETF (opto-eletronic transfer function), …","","","","","","Inverse ICtCp with the HLG transfer function","Inverse ICtCp with the PQ transfer function","ICtCp with the HLG transfer function","ICtCp with the PQ transfer function","ARIB STD-B67 or “Hybrid Log-Gamma”","Inverse of ARIB STD-B67 or “Hybrid Log-Gamma”","","","","","","","SMPTE ST 2084:2014 perceptual electro-optical transfer …","SMPTE ST 2084:2014 perceptual electo-optical transfer …","SMPTE ST 2084:2014 perceptual electo-optical transfer …","SMPTE ST 2084:2014 perceptual electo-optical transfer …","","","ACES2065-1 is a linear encoding in AP0 primaries with a …","ACEScg is a linear encoding in AP1 primaries with a D60 …","Adobe RGB (1998) is a linear encoding in Adobe 1998 …","Adobe Wide Gamut RGB is a linear encoding in Adobe Wide …","Array containing all built-in color spaces.","Apple RGB is a linear encoding in Apple primaries with a …","BT.2020 is a linear encoding in BT.2020 primaries with a …","BT.709 is a linear encoding in BT.709 primaries with a D65 …","CIE RGB is the original RGB space, defined in CIE RGB …","CIE XYZ reference color space. Uses CIE XYZ primaries with …","Display P3 by Apple is a linear encoding in P3 primaries …","Encoded BT.2020 is BT.2020 with the BT.2020 OETF applied.","Encoded BT.2100 PQ is BT.2020 (equivalent to the linear …","Encoded BT.709 is BT.709 with the BT.709 OETF applied.","Encoded Display P3 is Display P3 with the sRGB OETF …","Encoded sRGB is Linear sRGB with the sRGB OETF applied …","ICtCp_HLG is a non-linear encoding in BT.2020 primaries, …","ICtCp_PQ is a non-linear encoding in BT.2020 primaries, …","Linear sRGB is a linear encoding in BT.709 primaries with …","Oklab is a non-linear, perceptual encoding in XYZ, with a …","Oklch is a non-linear, perceptual encoding in XYZ, with a …","P3-D60 (ACES Cinema) is a linear encoding in P3 primaries …","P3-DCI (Theater) is a linear encoding in P3 primaries with …","Pro Photo RGB is a linear encoding in Pro Photo primaries …"],"i":[1,0,0,0,0,2,0,2,1,1,1,1,1,1,0,1,1,1,2,1,1,2,1,2,1,1,2,1,1,2,1,1,1,1,2,1,1,2,1,2,1,1,10,11,12,2,1,10,11,12,2,1,1,1,1,1,1,10,11,12,2,1,10,11,12,2,1,1,1,1,1,1,1,2,2,1,1,2,1,10,11,2,1,0,2,1,1,1,1,1,1,1,1,10,12,2,1,10,1,1,1,10,11,12,2,2,1,1,1,10,11,12,2,2,2,1,1,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,10,1,1,10,11,12,2,1,2,2,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,2,2,1,1,2,2,2,2,2,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,10,11,2,1,1,11,0,1,2,1,1,2,1,1,2,2,2,1,1,1,2,2,10,11,12,2,1,2,1,2,2,2,1,10,11,12,2,1,10,11,12,2,1,1,10,11,12,2,1,11,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,37,37,37,0,37,37,37,37,0,37,37,0,37,37,37,40,39,39,39,39,39,40,39,38,39,40,38,38,38,38,38,38,39,39,38,0,0,40,40,40,40,40,40,38,39,40,40,40,40,38,38,38,38,38,38,39,40,38,38,39,40,38,39,0,0,0,10,38,39,40,38,39,40,38,39,40,38,39,40,0,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,10,10,11,10,38,38,39,40,11,11,11,11,10,10,10,11,38,39,40,10,38,39,40,38,39,40,38,39,40,11,39,40,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,42,42,42,42,42,12,12,42,12,12,12,42,42,42,42,42,12,12,12,42,42,12,42,42,12,12,12,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,0,0,43,43,43,0,0,43,43,0,0,0,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[2,2,3],4],[[1,1,3],4],[[2,2]],[[1,1],1],[[1,3],1],[[2,2]],[[1,3]],[[1,1]],[[2,2],2],[[1,1],3],[1,1],[1],[1,1],[2,5],[1,6],[1,7],[2,[[8,[3]]]],[1,[[8,[3]]]],[2,[[8,[3]]]],[1,[[8,[3]]]],[1,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[1,1,1],1],[[1,3,3],1],[[1,3],1],[[1,3],1],[10,10],[11,11],[12,12],[2,2],[1,1],[[]],[[]],[[]],[[]],[[]],[[1,1],13],[[1,1],13],[[1,1],13],[[1,1],13],[[1,1],13],[[1,1],13],[[2,14],1],[[2,14],1],[[1,1],1],[[1,1],1],[[],2],[[],1],[15,[[16,[10]]]],[15,[[16,[11]]]],[15,[[16,[2]]]],[15,[[16,[1]]]],0,[2,3],[[1,1],3],[[1,1],3],[[1,1],1],[[1,3],1],[[1,3]],[[1,1]],[[1,1],3],[[1,1],1],[[10,10],4],[[12,12],4],[[2,2],4],[[1,1],4],[[],4],[1,1],[[1,3],17],[1,1],[[10,18],19],[[11,18],19],[[12,18],19],[[2,18],[[16,[20]]]],[[2,18],[[16,[20]]]],[[1,18],[[16,[20]]]],[[1,18],[[16,[20]]]],[1,1],[[]],[[]],[[]],[21,2],[22,2],[[]],[23,1],[[],1],[[]],[[],1],[[[8,[3]]],1],[3,2],[[[8,[3]]],1],[[1,3],2],[[1,1,1],2],[[[8,[3]]],2],[[[8,[[8,[3]]]]],2],[[[24,[3]]],2],[1,2],[[25,3,3,3],2],[26,2],[27,2],[28,2],[3,2],[3,2],[3,2],[29,2],[[29,3,29],2],[[[24,[3]]],1],[29,2],[[10,30]],[[1,14]],[[1,14]],[[]],[[]],[[]],[[]],[[]],[2,2],[2,4],[1,4],[2,4],[1,4],[1,13],[1,31],[1,4],[[],4],[[],4],[1,3],[1,3],[1,3],[[1,1,3],1],[[1,1],1],[1,3],[[1,1],1],[1,3],[[2,2]],[[2,3]],[[2,1]],[[2,23],23],[[2,22]],[[1,3],1],[[1,1],1],[[1,1,1],1],[[2,2]],[[2,3]],[[1,3]],[[1,1]],[[2,2],2],[[2,3],2],[[2,1],1],[[2,23],23],[2],[1,1],[[3,3,3],1],[1,1],[1,1],[[1,3],1],[32,2],[32,2],[32,1],[32,1],[[1,1],1],[[1,1],1],[1,1],[[1,1],1],[[1,1],1],[[1,3],1],[[1,1],1],[[1,3]],[[1,1]],[1,1],[[2,14],1],[[13,1,1],1],[[10,33],16],[[11,33],16],[[2,33],16],[[1,33],16],[1,1],0,0,[3,1],[[2,2]],[[1,3],1],[[1,1],1],[[2,2]],[[1,1]],[[1,3]],[[2,2],2],[32,2],[32,2],[32,1],[32,1],[1,[[8,[3]]]],[2,[[8,[3]]]],[2,[[8,[[8,[3]]]]]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[2,29],29],[[2,29],29],[2,2],[1,29],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[1,[[35,[1]]]],[[],36],[[],36],[[],36],[[],36],[[],36],0,[[2,[24,[3]]]],[[1,[24,[3]]]],0,0,[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],0,0,[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],0,0,[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,29],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],[1,1],[1,17],[1,17],[1,17],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[1,1,37],2],[[]],[[]],[37,2],[[],16],[[],16],[[],36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[38,38],[39,39],[40,40],[[]],[[]],[[]],0,[15,[[16,[38]]]],[15,[[16,[39]]]],[15,[[16,[40]]]],[[38,38],4],[[39,39],4],[[40,40],4],[[],4],[[],4],[[],4],[[38,18],19],[[39,18],19],[[40,18],19],[[]],[[]],[[]],[[38,30]],[[39,30]],[[40,30]],[[]],[[]],[[]],[10,4],[[39,40,38],10],[[41,41,41,10],11],[10,39],0,[[38,33],16],[[39,33],16],[[40,33],16],[11,10],0,[[41,41,41],11],[[11,10],11],[10,10],[10,10],[10,10],[11,11],[[]],[[]],[[]],[10,38],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],0,[39,[[8,[[8,[41]]]]]],[40,[[8,[41]]]],[10,40],[[10,39],10],[[10,38],10],[[10,40],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,1],1],[[12,1],1],[[12,1],1],[[]],[[]],[42,42],[[]],[[42,1],1],[[12,1],1],[[12,[8,[41]]]],[15,[[16,[42]]]],[12,10],[12,[[35,[43]]]],[12,38],[[42,42],4],[[42,18],19],[[]],[42,10],[[]],[12,12],[12,4],[12,42],[42,2],[[10,10],42],[[10,10],12],[42,10],[[42,33],16],[12,10],[12,[[35,[43]]]],[12,38],[[]],[[],16],[[],16],[[],36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[39,40,39,40],[[35,[2]]]],0,0,0,0,0,0,0,0,[1,1],[[1,40],1],[1,1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],0,0,[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[43,1,40],1],[[]],[[]],[[1,40],1],[[1,40],1],[43,43],[[]],[[]],0,0,[[]],[[38,38],[[35,[43]]]],0,[[1,40],1],[[1,40],1],[[]],[[],16],[[],16],[[],36],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[[1,40],1],[41,41],[[1,40],1],[41,41],[[[8,[[8,[41]]]],[8,[41]]],2],[[[8,[[8,[41]]]],[8,[41]]],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Vec3"],[3,"Mat3"],[15,"f32"],[15,"bool"],[3,"DMat3"],[3,"DVec3"],[3,"IVec3"],[15,"array"],[3,"UVec3"],[3,"ColorSpace"],[3,"Color"],[3,"ColorConversion"],[3,"BVec3"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[3,"Vec4"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Mat3A"],[3,"Affine2"],[3,"Vec3A"],[15,"slice"],[4,"EulerRot"],[3,"Mat2"],[3,"Mat4"],[3,"Quat"],[3,"Vec2"],[8,"Hasher"],[15,"u32"],[8,"Iterator"],[8,"Serializer"],[3,"String"],[4,"Option"],[3,"TypeId"],[4,"LMSConeSpace"],[4,"TransformFn"],[4,"RGBPrimaries"],[4,"WhitePoint"],[6,"FType"],[3,"LinearColorConversion"],[3,"ColorTransform"]],"a":{"magnitude":[157],"magnitude2":[159],"mix":[160],"scale":[127]}},\
"libm":{"doc":"libm in pure Rust","t":"DFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFLLFFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFFLLFFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFLFLLFFLLFLFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFFLLFFLLFFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFLLFFFLLFFLLFFLLFFLLFFLLFFLLFLLLFLLFFLLFFLLF","n":["Libm","acos","acos","acos","acosf","acosh","acosh","acosh","acoshf","asin","asin","asin","asinf","asinh","asinh","asinh","asinhf","atan","atan","atan","atan2","atan2","atan2","atan2f","atanf","atanh","atanh","atanh","atanhf","borrow","borrow_mut","cbrt","cbrt","cbrt","cbrtf","ceil","ceil","ceil","ceilf","copysign","copysign","copysign","copysignf","cos","cos","cos","cosf","cosh","cosh","cosh","coshf","erf","erf","erf","erfc","erfc","erfc","erfcf","erff","exp","exp","exp","exp10","exp10","exp10","exp10f","exp2","exp2","exp2","exp2f","expf","expm1","expm1","expm1","expm1f","fabs","fabs","fabs","fabsf","fdim","fdim","fdim","fdimf","floor","floor","floor","floorf","fma","fma","fma","fmaf","fmax","fmax","fmax","fmaxf","fmin","fmin","fmin","fminf","fmod","fmod","fmod","fmodf","frexp","frexp","frexp","frexpf","from","hypot","hypot","hypot","hypotf","ilogb","ilogb","ilogb","ilogbf","into","j0","j0","j0","j0f","j1","j1","j1","j1f","jn","jn","jn","jnf","ldexp","ldexp","ldexp","ldexpf","lgamma","lgamma","lgamma","lgamma_r","lgamma_r","lgamma_r","lgammaf","lgammaf_r","log","log","log","log10","log10","log10","log10f","log1p","log1p","log1p","log1pf","log2","log2","log2","log2f","logf","modf","modf","modf","modff","nextafter","nextafter","nextafter","nextafterf","pow","pow","pow","powf","remainder","remainder","remainder","remainderf","remquo","remquo","remquo","remquof","rint","rint","rint","rintf","round","round","round","roundf","scalbn","scalbn","scalbn","scalbnf","sin","sin","sin","sincos","sincos","sincos","sincosf","sinf","sinh","sinh","sinh","sinhf","sqrt","sqrt","sqrt","sqrtf","tan","tan","tan","tanf","tanh","tanh","tanh","tanhf","tgamma","tgamma","tgamma","tgammaf","trunc","trunc","trunc","truncf","try_from","try_into","type_id","y0","y0","y0","y0f","y1","y1","y1","y1f","yn","yn","yn","ynf"],"q":[[0,"libm"]],"d":["Generic helper for libm functions, abstracting over f32 …","Arccosine (f64)","","","Arccosine (f32)","Inverse hyperbolic cosine (f64)","","","Inverse hyperbolic cosine (f32)","Arcsine (f64)","","","Arcsine (f32)","Inverse hyperbolic sine (f64)","","","Inverse hyperbolic sine (f32)","Arctangent (f64)","","","Arctangent of y/x (f64)","","","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","","","Inverse hyperbolic tangent (f32)","","","Computes the cube root of the argument.","","","Cube root (f32)","Ceil (f64)","","","Ceil (f32)","Sign of Y, magnitude of X (f64)","","","Sign of Y, magnitude of X (f32)","","","","","Hyperbolic cosine (f64)","","","Hyperbolic cosine (f64)","Error function (f64)","","","Complementary error function (f64)","","","Complementary error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","","","","","Exponential, base 2 (f64)","","","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","","","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","","","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","","","Positive difference (f32)","Floor (f64)","","","Floor (f32)","Floating multiply add (f64)","","","Floating multiply add (f32)","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,0,6,6,0,0,6,6,0,6,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,0,6,6,0,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,6,0,6,6,0,0,6,6,0,0,6,6,0],"f":[0,[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[2,2],[1,1],[2,2],[1,1],[2,2],[[]],[[]],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[1,1],[2,2],[2,2],[[1,1,1],1],[[2,2,2],2],[[1,1,1],1],[[2,2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[1],[2],[1],[2],[[]],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[1,3],[2,3],[1,3],[2,3],[[]],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[[3,1],1],[[3,2],2],[[3,1],1],[[3,2],2],[[1,3],1],[[2,3],2],[[1,3],1],[[2,3],2],[1,1],[1,1],[2,2],[1],[1],[2],[2,2],[2],[1,1],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[2,2],[1],[2],[1],[2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,3],1],[[1,3],1],[[2,3],2],[[2,3],2],[1,1],[2,2],[1,1],[1],[2],[1],[2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[[],4],[[],4],[[],5],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[[3,1],1],[[3,2],2],[[3,1],1],[[3,2],2]],"c":[],"p":[[15,"f64"],[15,"f32"],[15,"i32"],[4,"Result"],[3,"TypeId"],[3,"Libm"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[89,"num_traits::bounds"],[96,"num_traits::cast"],[131,"num_traits::float"],[242,"num_traits::identities"],[252,"num_traits::int"],[272,"num_traits::ops"],[280,"num_traits::ops::bytes"],[291,"num_traits::ops::checked"],[307,"num_traits::ops::euclid"],[313,"num_traits::ops::inv"],[316,"num_traits::ops::mul_add"],[321,"num_traits::ops::overflowing"],[327,"num_traits::ops::saturating"],[336,"num_traits::ops::wrapping"],[348,"num_traits::pow"],[353,"num_traits::real"],[401,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,38,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,38,0,0,2,5,5,0,0,0,0,0,0,0,2,5,2,5,2,5,0,0,0,0,39,40,39,41,0,0,0,0,42,0,10,43,43,43,43,43,43,43,43,43,43,43,43,43,43,12,12,12,12,12,12,12,12,12,12,12,12,12,12,44,44,44,44,44,44,44,44,44,44,0,0,0,44,44,44,44,44,44,44,44,44,45,46,45,45,45,45,45,45,45,45,45,45,46,46,45,45,45,45,46,45,45,45,45,45,46,45,46,45,46,45,46,45,45,46,45,46,45,46,45,46,45,46,45,46,46,45,45,45,45,45,45,45,46,46,45,45,46,46,45,46,45,45,46,45,46,45,46,45,45,45,46,45,46,45,46,45,46,45,45,45,45,45,45,46,45,46,45,45,46,0,0,32,33,0,32,32,33,0,33,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,0,0,0,48,49,0,0,0,49,49,49,48,48,48,0,0,0,0,0,0,0,0,50,51,35,52,53,54,55,56,0,0,57,57,58,58,0,59,59,0,0,60,60,61,0,0,0,62,63,64,0,0,0,0,65,66,67,65,68,0,0,0,0,0,0,69,70,71,72,73,74,75,0,0,0,75,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,0,37,0,37,37,37,0,37],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[10,[[11,[10]]]],[12,11],[13,11],[14,11],[15,11],[16,11],[17,11],[18,11],[19,11],[20,11],[21,11],[22,11],[7,11],[23,11],[24,11],[25,11],[[],[[11,[13]]]],[[],[[11,[14]]]],[[],[[11,[15]]]],[[],[[11,[16]]]],[[],[[11,[17]]]],[[],[[11,[18]]]],[[],[[11,[19]]]],[[],[[11,[20]]]],[[],[[11,[21]]]],[[],[[11,[22]]]],[[],[[11,[7]]]],[[],[[11,[23]]]],[[],[[11,[24]]]],[[],[[11,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[],[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,27]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,27]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[26,[28,[[0,[26,[28,[[0,[26,[28,[[0,[26,[28,[[0,[26,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[31,30],[[],30],[[],32],[[]],[[]],[[]],[[],33],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[7,11],[7,11],[[],11],0,0,[[],11],[[],11],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[34,32,35]],25],[[11,[[0,[34,32,35]]]]]],[[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,36]]]]]]]]]]]]]]]]]],25],[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,36]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[37,37],[[]],[[37,37],37],[[]],[[],30],[[],30],[37,37],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"ToBytes"],[8,"FromBytes"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"serde":{"doc":"Serde","t":"IYIQQQIYQQQQQQQILLLAKKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKOLLAOKKKKKKLKKKKKKKKKKKKKKKKLKKKKKKKNNNIIIIQNIIQQQQQINDININNNNNINCNNNENNNQQQIILLLLLLLLKLKKLKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKLLLKLKLLLLLLLLLKLLLLLLKLKLLLKLKLLKLLLLLLLKLLKLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQQQQQQQDQQQQQQQQIIQIQIQIQIQIQIQICLLLLLKKKKKKKKLLLLLLLLLLKKKKKKLLLKKKKKKLLLLLKKKKKLKKKKKKKKKKKKLKKKKKKKKLLLLLL","n":["Deserialize","Deserialize","Deserializer","Error","Error","Ok","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","provide","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[88,"serde::de"],[266,"serde::de::value"],[1533,"serde::ser"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","Derive macro available if serde is built with …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Derive macro available if serde is built with …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,0,5,11,11,0,0,11,11,11,11,11,11,11,0,11,11,11,0,33,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,11,0,0,22,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,28,28,28,0,0,0,0,79,28,0,0,5,41,40,39,80,0,28,0,0,28,0,28,28,28,28,28,0,28,0,28,28,28,0,28,28,28,34,6,39,0,0,27,28,27,28,27,28,27,28,37,27,33,34,27,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,37,27,28,6,27,31,31,27,27,28,28,27,28,27,28,79,37,37,37,5,37,80,80,41,41,40,40,40,40,40,40,41,40,80,27,28,28,27,28,27,28,80,27,28,80,37,37,0,39,39,6,27,6,6,6,6,27,6,6,27,6,6,27,6,27,6,6,6,27,6,6,27,6,27,6,27,6,27,6,27,6,27,6,6,27,6,6,6,27,6,6,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,53,53,53,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,52,69,53,42,43,44,45,46,47,48,49,52,53,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,52,69,52,52,52,53,52,52,69,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,53,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,43,44,45,46,47,71,0,11,81,82,83,84,85,86,87,0,11,81,82,83,84,85,86,87,0,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,0,78,78,11,11,11,77,81,82,83,84,85,86,87,78,78,78,78,78,78,78,78,78,11,22,11,11,11,81,82,78,78,85,11,11,83,84,86,87,78,78,78,78,11,11,11,11,11,85,78,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,85,78,86,87,78,78,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[[0,[3,4]]],2],0,[5,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,[8,[7]],6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[6,2],[6,2],[6,2],[6,2],[[7,[8,[7]],6],2],[[9,6],2],[[7,9,6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],0,[[],10],[[],10],0,0,[11,2],[10,2],[[[8,[12]]],2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[19,2],[20,2],[[[21,[9]]],2],[[7,[0,[22,4]]],2],[[7,23,7,[0,[22,4]]],2],[[],2],[[[21,[9]]],2],[[[0,[22,4]]],2],[7,2],[[7,9],2],[[7,23,7,9],2],[9,2],[[7,9],2],[[7,23,7,9],2],[24,2],[25,2],[23,2],[26,2],[12,2],[[],2],[7,2],[[7,23,7],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[27,27],[28,28],[[]],[[]],[3],[[],27],[5,2],[5,2],[5,[[2,[27]]]],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,[8,[7]],6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[6,2],[6,2],[6,2],[6,2],[[7,[8,[7]],6],2],[[9,6],2],[[7,9,6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[7],[[27,27],10],[[28,28],10],[29,30],[[27,29],30],[29,30],[[31,29],30],[[27,29],30],[29,[[2,[32]]]],[[28,29],30],[[28,29],30],[[]],[[]],[[]],[[]],[[]],[[9,31]],[[28,31]],[[28,31]],[[],10],[7],[[],[[2,[33]]]],[34,2],[[],[[2,[[21,[33]]]]]],[34,[[2,[21]]]],[[],[[2,[21]]]],[[34,34],[[2,[21]]]],[[],[[2,[[21,[33]]]]]],[34,[[2,[21]]]],[[],[[2,[33]]]],[34,2],[[],[[21,[9]]]],[[],[[21,[9]]]],[[[8,[7]],6],2],[[]],[[]],[[],35],[[],2],[[],2],[[],2],[[],2],[[9,6],2],[[],36],[[],36],[[],2],[[7,[8,[7]]]],[[7,[8,[7]]]],0,[[],2],[34,2],[10,[[2,[37]]]],[[27,10],2],[[[8,[12]]],[[2,[37]]]],[7,[[2,[37]]]],[[[38,[12]]],[[2,[37]]]],[[[8,[12]]],[[2,[37]]]],[[27,[8,[12]]],[[2,[37]]]],[13,[[2,[37]]]],[39,2],[[27,39],2],[14,[[2,[37]]]],[15,[[2,[37]]]],[[27,15],2],[16,[[2,[37]]]],[[27,16],2],[17,[[2,[37]]]],[18,[[2,[37]]]],[19,[[2,[37]]]],[[27,19],2],[20,[[2,[37]]]],[40,2],[[27,40],2],[5,2],[[27,5],2],[[],[[2,[37]]]],[27,2],[41,2],[[27,41],2],[5,2],[[27,5],2],[7,[[2,[37]]]],[[27,7],[[2,[37]]]],[35,[[2,[37]]]],[24,[[2,[37]]]],[[27,24],2],[25,[[2,[37]]]],[23,[[2,[37]]]],[26,[[2,[37]]]],[[27,26],2],[12,[[2,[37]]]],[[],[[2,[37]]]],[27,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[[[52,[[0,[50,51]]]]],[[52,[[0,[50,51]]]]]],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[[[69,[51,51]]],[[69,[51,51]]]],[[[70,[51]]],[[70,[51]]]],[[[71,[51]]],[[71,[51]]]],[[[72,[51]]],[[72,[51]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,53],[3,53],[53,7],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],7,[8,[7]],6],2],[[[43,[37]],7,[8,[7]],6],2],[[[44,[37]],7,[8,[7]],6],2],[[[45,[37]],7,[8,[7]],6],2],[[[46,[37]],7,[8,[7]],6],2],[[[47,[37]],7,[8,[7]],6],2],[[[48,[37]],7,[8,[7]],6],2],[[[49,[37]],7,[8,[7]],6],2],[[[52,[50,37]],7,[8,[7]],6],2],[[[54,[37]],7,[8,[7]],6],2],[[[55,[37]],7,[8,[7]],6],2],[[[56,[37]],7,[8,[7]],6],2],[[[57,[37]],7,[8,[7]],6],2],[[[58,[37]],7,[8,[7]],6],2],[[[59,[37]],7,[8,[7]],6],2],[[[60,[37]],7,[8,[7]],6],2],[[[61,[37]],7,[8,[7]],6],2],[[[62,[37]],7,[8,[7]],6],2],[[[63,[37]],7,[8,[7]],6],2],[[[64,[37]],7,[8,[7]],6],2],[[[65,[37]],7,[8,[7]],6],2],[[[66,[37]],7,[8,[7]],6],2],[[[67,[37]],7,[8,[7]],6],2],[[[68,[37]],7,[8,[7]],6],2],[[[69,[50,37]],7,[8,[7]],6],2],[[[70,[41]],7,[8,[7]],6],2],[[[71,[40]],7,[8,[7]],6],2],[[[72,[39]],7,[8,[7]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],7,6],2],[[[43,[37]],7,6],2],[[[44,[37]],7,6],2],[[[45,[37]],7,6],2],[[[46,[37]],7,6],2],[[[47,[37]],7,6],2],[[[48,[37]],7,6],2],[[[49,[37]],7,6],2],[[[52,[50,37]],7,6],2],[[[54,[37]],7,6],2],[[[55,[37]],7,6],2],[[[56,[37]],7,6],2],[[[57,[37]],7,6],2],[[[58,[37]],7,6],2],[[[59,[37]],7,6],2],[[[60,[37]],7,6],2],[[[61,[37]],7,6],2],[[[62,[37]],7,6],2],[[[63,[37]],7,6],2],[[[64,[37]],7,6],2],[[[65,[37]],7,6],2],[[[66,[37]],7,6],2],[[[67,[37]],7,6],2],[[[68,[37]],7,6],2],[[[69,[50,37]],7,6],2],[[[70,[41]],7,6],2],[[[71,[40]],7,6],2],[[[72,[39]],7,6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],7,[8,[7]],6],2],[[[43,[37]],7,[8,[7]],6],2],[[[44,[37]],7,[8,[7]],6],2],[[[45,[37]],7,[8,[7]],6],2],[[[46,[37]],7,[8,[7]],6],2],[[[47,[37]],7,[8,[7]],6],2],[[[48,[37]],7,[8,[7]],6],2],[[[49,[37]],7,[8,[7]],6],2],[[[52,[50,37]],7,[8,[7]],6],2],[[[54,[37]],7,[8,[7]],6],2],[[[55,[37]],7,[8,[7]],6],2],[[[56,[37]],7,[8,[7]],6],2],[[[57,[37]],7,[8,[7]],6],2],[[[58,[37]],7,[8,[7]],6],2],[[[59,[37]],7,[8,[7]],6],2],[[[60,[37]],7,[8,[7]],6],2],[[[61,[37]],7,[8,[7]],6],2],[[[62,[37]],7,[8,[7]],6],2],[[[63,[37]],7,[8,[7]],6],2],[[[64,[37]],7,[8,[7]],6],2],[[[65,[37]],7,[8,[7]],6],2],[[[66,[37]],7,[8,[7]],6],2],[[[67,[37]],7,[8,[7]],6],2],[[[68,[37]],7,[8,[7]],6],2],[[[69,[50,37]],7,[8,[7]],6],2],[[[70,[41]],7,[8,[7]],6],2],[[[71,[40]],7,[8,[7]],6],2],[[[72,[39]],7,[8,[7]],6],2],[[[42,[37]],9,6],2],[[[43,[37]],9,6],2],[[[44,[37]],9,6],2],[[[45,[37]],9,6],2],[[[46,[37]],9,6],2],[[[47,[37]],9,6],2],[[[48,[37]],9,6],2],[[[49,[37]],9,6],2],[[[52,[50,37]],9,6],2],[[[54,[37]],9,6],2],[[[55,[37]],9,6],2],[[[56,[37]],9,6],2],[[[57,[37]],9,6],2],[[[58,[37]],9,6],2],[[[59,[37]],9,6],2],[[[60,[37]],9,6],2],[[[61,[37]],9,6],2],[[[62,[37]],9,6],2],[[[63,[37]],9,6],2],[[[64,[37]],9,6],2],[[[65,[37]],9,6],2],[[[66,[37]],9,6],2],[[[67,[37]],9,6],2],[[[68,[37]],9,6],2],[[[69,[50,37]],9,6],2],[[[70,[41]],9,6],2],[[[71,[40]],9,6],2],[[[72,[39]],9,6],2],[[[42,[37]],7,9,6],2],[[[43,[37]],7,9,6],2],[[[44,[37]],7,9,6],2],[[[45,[37]],7,9,6],2],[[[46,[37]],7,9,6],2],[[[47,[37]],7,9,6],2],[[[48,[37]],7,9,6],2],[[[49,[37]],7,9,6],2],[[[52,[50,37]],7,9,6],2],[[[54,[37]],7,9,6],2],[[[55,[37]],7,9,6],2],[[[56,[37]],7,9,6],2],[[[57,[37]],7,9,6],2],[[[58,[37]],7,9,6],2],[[[59,[37]],7,9,6],2],[[[60,[37]],7,9,6],2],[[[61,[37]],7,9,6],2],[[[62,[37]],7,9,6],2],[[[63,[37]],7,9,6],2],[[[64,[37]],7,9,6],2],[[[65,[37]],7,9,6],2],[[[66,[37]],7,9,6],2],[[[67,[37]],7,9,6],2],[[[68,[37]],7,9,6],2],[[[69,[50,37]],7,9,6],2],[[[70,[41]],7,9,6],2],[[[71,[40]],7,9,6],2],[[[72,[39]],7,9,6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],6],2],[[[43,[37]],6],2],[[[44,[37]],6],2],[[[45,[37]],6],2],[[[46,[37]],6],2],[[[47,[37]],6],2],[[[48,[37]],6],2],[[[49,[37]],6],2],[[[52,[50,37]],6],2],[[[54,[37]],6],2],[[[55,[37]],6],2],[[[56,[37]],6],2],[[[57,[37]],6],2],[[[58,[37]],6],2],[[[59,[37]],6],2],[[[60,[37]],6],2],[[[61,[37]],6],2],[[[62,[37]],6],2],[[[63,[37]],6],2],[[[64,[37]],6],2],[[[65,[37]],6],2],[[[66,[37]],6],2],[[[67,[37]],6],2],[[[68,[37]],6],2],[[[69,[50,37]],6],2],[[[70,[41]],6],2],[[[71,[40]],6],2],[[[72,[39]],6],2],[[[42,[37]],7,6],2],[[[43,[37]],7,6],2],[[[44,[37]],7,6],2],[[[45,[37]],7,6],2],[[[46,[37]],7,6],2],[[[47,[37]],7,6],2],[[[48,[37]],7,6],2],[[[49,[37]],7,6],2],[[[52,[50,37]],7,6],2],[[[54,[37]],7,6],2],[[[55,[37]],7,6],2],[[[56,[37]],7,6],2],[[[57,[37]],7,6],2],[[[58,[37]],7,6],2],[[[59,[37]],7,6],2],[[[60,[37]],7,6],2],[[[61,[37]],7,6],2],[[[62,[37]],7,6],2],[[[63,[37]],7,6],2],[[[64,[37]],7,6],2],[[[65,[37]],7,6],2],[[[66,[37]],7,6],2],[[[67,[37]],7,6],2],[[[68,[37]],7,6],2],[[[69,[50,37]],7,6],2],[[[70,[41]],7,6],2],[[[71,[40]],7,6],2],[[[72,[39]],7,6],2],[[[52,[50,37]]],[[2,[37]]]],[[[69,[50,37]]],[[2,[37]]]],[[53,53],10],[[42,29],30],[[43,29],30],[[44,29],30],[[45,29],30],[[46,29],30],[[47,29],30],[[48,29],30],[[49,29],30],[[[52,[[0,[50,73]]]],29],30],[[53,29],30],[[53,29],30],[[54,29],30],[[55,29],30],[[56,29],30],[[57,29],30],[[58,29],30],[[59,29],30],[[60,29],30],[[61,29],30],[[62,29],30],[[63,29],30],[[64,29],30],[[65,29],30],[[66,29],30],[[67,29],30],[[68,29],30],[[[69,[73]],29],30],[[[70,[73]],29],30],[[[71,[73]],29],30],[[[72,[73]],29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[23,43],[7,44],[7,45],[35,46],[[[74,[7]]],47],[[[8,[12]]],48],[[[8,[12]]],49],[50,[[52,[50]]]],[10,54],[20,55],[17,56],[18,57],[19,58],[75,59],[12,60],[25,61],[26,62],[9,63],[14,64],[15,65],[13,66],[16,67],[24,68],[50,[[69,[50]]]],[[],70],[[],71],[[],72],[[[52,[50,37]],34],[[2,[21]]]],[[[69,[50,37]],34],[[2,[21]]]],[[[52,[50,37]],34,34],[[2,[21]]]],[[[52,[50,37]],34],[[2,[21]]]],[[[52,[50,37]],34],2],[76],[[[52,[50,37]]],[[21,[9]]]],[[[52,[50,37]]],[[21,[9]]]],[[[69,[50,37]]],[[21,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[43,[37]],34],2],[[[44,[37]],34],2],[[[45,[37]],34],2],[[[46,[37]],34],2],[[[47,[37]],34],2],[[[71,[40]],34],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,2],[1,2],[[[0,[3,4]]],2],[3],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[78,[77]]],[[2,[77]]]],[[[78,[77]]],[[2,[77]]]],[[[78,[77]]],[[2,[77]]]],[[[78,[77]]],[[2,[77]]]],[[[78,[77]]],[[2,[77]]]],[[[78,[77]]],[[2,[77]]]],[[[78,[77]]],[[2,[77]]]],[[]],[[]],[[],10],[11,2],[10,2],[[[8,[12]]],2],[13,2],[[[0,[22,4]]],2],[[[0,[22,4]]],2],[[[78,[77]],[0,[22,4]]],[[2,[77]]]],[[[78,[77]],[0,[22,4]]],[[2,[77]]]],[[[0,[22,4]],[0,[22,4]]],2],[14,2],[15,2],[[[0,[22,4]]],2],[[[0,[22,4]]],2],[[7,[0,[22,4]]],2],[[7,[0,[22,4]]],2],[[[78,[77]],7,[0,[22,4]]],[[2,[77]]]],[[[78,[77]],7,[0,[22,4]]],[[2,[77]]]],[[[78,[77]],[0,[22,4]]],[[2,[77]]]],[[[78,[77]],[0,[22,4]]],[[2,[77]]]],[16,2],[17,2],[18,2],[19,2],[20,2],[[[0,[22,4]]],2],[[[78,[77]],[0,[22,4]]],[[2,[77]]]],[[[21,[9]]],2],[[7,[0,[22,4]]],2],[[7,23,7,[0,[22,4]]],2],[[],2],[[[21,[9]]],2],[[[0,[22,4]]],2],[7,2],[[7,9],2],[[7,23,7,9],2],[9,2],[[7,9],2],[[7,23,7,9],2],[24,2],[25,2],[23,2],[26,2],[12,2],[[],2],[7,2],[[7,23,7],2],[[[0,[22,4]]],2],[[[78,[77]],[0,[22,4]]],[[2,[77]]]],[7,2],[7,2],[[],2],[[],2],[[],36]],"c":[],"p":[[8,"IntoIterator"],[4,"Result"],[8,"Display"],[8,"Sized"],[8,"Deserializer"],[8,"Visitor"],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[8,"Serializer"],[15,"u8"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option"],[8,"Serialize"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"IgnoredAny"],[4,"Unexpected"],[3,"Formatter"],[6,"Result"],[8,"Expected"],[3,"Error"],[8,"Deserialize"],[8,"DeserializeSeed"],[3,"String"],[3,"TypeId"],[8,"Error"],[3,"Vec"],[8,"EnumAccess"],[8,"MapAccess"],[8,"SeqAccess"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[8,"Iterator"],[8,"Clone"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[3,"EnumAccessDeserializer"],[8,"Debug"],[4,"Cow"],[15,"isize"],[3,"Demand"],[8,"Error"],[3,"Impossible"],[8,"IntoDeserializer"],[8,"VariantAccess"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"serde_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
